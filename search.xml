<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS学习笔记（一）</title>
    <url>/2022/05/25/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="margin的传递"><a href="#margin的传递" class="headerlink" title="margin的传递"></a>margin的传递</h1><p>margin一般用来设置设置盒子的外边距，padding一般用来设置设置盒子的内边距，但是不是绝对的。</p>
<p>margin的传递的复现场景：我们希望盒子内部的某个子盒子距离父盒子有一定的上边距或者下边距。</p>
<h2 id="margin-top传递"><a href="#margin-top传递" class="headerlink" title="margin-top传递"></a>margin-top传递</h2><p><strong>复现：</strong>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，子盒子的margin-top会传递给父盒子，即父盒子距离其上方有20px。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="给父盒子设置padding-top"><a href="#给父盒子设置padding-top" class="headerlink" title="给父盒子设置padding-top"></a>给父盒子设置padding-top</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 添加padding */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-top</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="给父盒子设置border-x2F-border-top"><a href="#给父盒子设置border-x2F-border-top" class="headerlink" title="给父盒子设置border&#x2F;border-top"></a>给父盒子设置border&#x2F;border-top</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 添加border,缺点：border增加了额外的像素 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid transparent; </span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 或者 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* border: 1px solid transparent; */</span>  </span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发BFC</h4><p>BFC：block formating context（块级格式化上下文）</p>
<p><strong>触发BFC：设置overflow的值为auto</strong></p>
<p>给父盒子设置一个独立的空间，盒子内部子盒子得布局不受外界影响。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 触发BFC */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;  </span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="margin-bottom传递"><a href="#margin-bottom传递" class="headerlink" title="margin-bottom传递"></a>margin-bottom传递</h2><p><strong>复现：</strong>如果块级元素的底部线和父元素的底部线重叠，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</p>
<p>此处，希望子盒子下方有一定边距</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>测试margin-bottom传递<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="给父盒子设置padding-bottom"><a href="#给父盒子设置padding-bottom" class="headerlink" title="给父盒子设置padding-bottom"></a>给父盒子设置padding-bottom</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>测试margin-bottom传递<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="给父盒子设置border-x2F-border-bottom"><a href="#给父盒子设置border-x2F-border-bottom" class="headerlink" title="给父盒子设置border&#x2F;border-bottom"></a>给父盒子设置border&#x2F;border-bottom</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 或者 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>测试margin-bottom传递<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="触发BFC-1"><a href="#触发BFC-1" class="headerlink" title="触发BFC"></a>触发BFC</h4><p>BFC：block formating context（块级格式化上下文）</p>
<p><strong>触发BFC：设置overflow的值为auto</strong></p>
<p>给父盒子设置一个独立的空间，盒子内部子盒子得布局不受外界影响。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>测试margin-bottom传递<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="margin的折叠"><a href="#margin的折叠" class="headerlink" title="margin的折叠"></a>margin的折叠</h1><p>垂直方向上相邻的2个margin (margin-top、margin-bottom)有可能会合并为1个margin，这种现象叫做collapse(折叠，BFC所引起，参看CSS学习笔记（七））</p>
<p>折叠后得计算规则：两者取其大</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决方案：仅给一个盒子设置margin</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（七）</title>
    <url>/2022/06/21/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="创建BFC的情况"><a href="#创建BFC的情况" class="headerlink" title="创建BFC的情况"></a>创建BFC的情况</h1><ul>
<li>根元素(<code>&lt;html&gt;</code>)</li>
<li>浮动元素（元素的 float不是none)</li>
<li>绝对定位元素(元素的 position 为 absolute 或 fixed)</li>
<li>行内块元素（(元素的display 为inline-block)</li>
<li>表格单元格(元素的display为 table-cell，HTML表格单元格默认为该值)，表格标题(元素的 display 为 table-caption，HTML表格标题默认为该值)</li>
<li>匿名表格单元格元素(元素的display 为 table、table-row、table-row-group、table-header-group、table-footer-group(分别是HTML table、row、tbody、thead、tfoot 的默认属性)或inline-table)</li>
<li>overflow计算值(Computed)不为 visible的块元素</li>
<li>弹性元素(display为flex或inline-flex元素的直接子元素)</li>
<li>网格元素(display为grid或inline-grid元素的直接子元素)</li>
<li>display值为flow-root的元素</li>
</ul>
<h1 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h1><ul>
<li>在BFC中，box会在垂直方向上一个挨着一个的排布;</li>
<li>垂直方向的间距由margin属性决定;</li>
<li><strong>在同一个BFC中</strong>，<font color=red>相邻两个box之间的margin会折叠(collapse)</font>(margin折叠的本质) ;</li>
<li>在BFC中，每个元素的左边缘是紧挨着包含块的左边缘的;</li>
</ul>
<p>作用：</p>
<h2 id="解决浮动高度塌陷问题；"><a href="#解决浮动高度塌陷问题；" class="headerlink" title="解决浮动高度塌陷问题；"></a><strong>解决浮动高度塌陷问题；</strong></h2><p>注意：<strong>说解决高度塌陷问题不准确</strong>，高度塌陷的情况有两种：浮动和绝对或者固定定位</p>
<p>BFC解决不了由于绝对或者固定定位造成的高度塌陷问题，能解决浮动造成的高度塌陷问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释：给box盒子设置overflow: hidden;box形成了BFC</p>
<p>但是BFC解决浮动高度塌陷还需另外一个条件：box的高度为auto（height不设置，默认值为auto）</p>
<p>BFC的高度是auto的情况下，计算高度的方法如下：</p>
<ul>
<li><p>1.如果只有inline-level，是行高的顶部和底部的距离;</p>
</li>
<li><p>2.如果有block-level，是由最底层的块上边缘和最底层块盒子的下边缘之间的距离</p>
</li>
<li><p>3.注意：</p>
<p>在高度为auto的情况下，</p>
<ul>
<li>绝对定位的元素的高度是不会汇报给BFC的父盒子的，所以父盒子高度仍为0</li>
<li>浮动的元素的高度也不会汇报给BFC的父盒子，但是BFC会一直增加自己的高度，直到包含所有浮动元素的下边缘。所以高度可计算</li>
</ul>
</li>
</ul>
<h2 id="解决margin的折叠以及传递问题"><a href="#解决margin的折叠以及传递问题" class="headerlink" title="解决margin的折叠以及传递问题"></a><strong>解决margin的折叠以及传递问题</strong></h2><p>（参看学习笔记一）</p>
<h1 id="DPR"><a href="#DPR" class="headerlink" title="DPR"></a>DPR</h1><p>device pixel ratio（设备像素比）</p>
<p>即：物理像素和逻辑像素的比</p>
<p>逻辑像素：由操作系统规定的</p>
<p>物理像素：硬件设备在出厂时就初始化了的</p>
<p>DPR:可以理解为物理像素和逻辑像素之间的映射关系，DPR越高，画面显示越细腻。</p>
<p>（DPR越高，一个逻辑像素映射的物理像素越多，即单位逻辑像素使用的物理像素越多。因此画面就越细腻。）</p>
<p>在浏览器终端，可以使用<code>window.devicePixelRatio</code>来获得</p>
<h1 id="PPI"><a href="#PPI" class="headerlink" title="PPI"></a>PPI</h1><p>每英寸（in）的物理像素</p>
<p>1in &#x3D; 2.54cm;</p>
<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><p>媒体查询是一种提供给开发者针对不同设备需求进行定制化开发的一个接口。<br>你可以根据设备的类型（比如屏幕设备、打印机设备）或者特定的特性&lt;比如屏幕的宽度)来修改你的页面。</p>
<h2 id="媒体查询的方式"><a href="#媒体查询的方式" class="headerlink" title="媒体查询的方式"></a>媒体查询的方式</h2><ul>
<li>在style中使用@import使用媒体查询（常用);</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@import</span> url(<span class="string">&#x27;./test.css&#x27;</span>) (<span class="attribute">max-width</span>:<span class="number">800px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>link标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./test.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(max-width:800px) and (min-width: 300px)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>@media</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">375px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">37.5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">320px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">417px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1000px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">41.4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，screen可以省略，如果省略，默认为all</p>
<p>其他：使用Window.matchMedia()和MediaQueryList.addListener()方法来测试和监控媒体状态;</p>
<h2 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h2><p>媒体类型是可选的，并且会(隐式地)应用all类型。</p>
<p>常见的媒体类型：</p>
<ul>
<li>all:适用于所有设备。</li>
<li>print:适用于在打印预览模式下在屏幕上查看的分页材料和文档。</li>
<li>screen(掌握)∶主要用于屏幕。</li>
<li>speech:主要用于语音合成器。</li>
</ul>
<h2 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h2><ul>
<li>媒体特性(Media features）描述了浏览器、输出设备，或是预览环境的具体特征;</li>
<li>通常会将媒体特性描述为一个表达式;</li>
<li>每条媒体特性表达式都<strong>必须用括号括起来</strong>;</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220625214245743.png" alt="媒体特性"></p>
<h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><ul>
<li>and: and操作符用于将多个媒体查询规则组合成单条媒体查询</li>
<li>not: not运算符用于否定媒体查询，如果不满足这个条件则返回true，否则返回false；</li>
<li>only: only运算符仅在整个查询匹配时才用于应用样式。</li>
<li>，(逗号):逗号用于将多个媒体查询合并为一个规则。</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>BFC</tag>
        <tag>媒体查询</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（三）</title>
    <url>/2022/06/02/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="border图形（制图）"><a href="#border图形（制图）" class="headerlink" title="border图形（制图）"></a>border图形（制图）</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-origin</span>: center <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">1s</span> ease;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 旋转中心 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 旋转角度 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上代码呈现三角形</p>
<p>参考网址：<a href="https://css-tricks.com/the-shapes-of-css/">https://css-tricks.com/the-shapes-of-css/</a></p>
<h1 id="CSS精灵图"><a href="#CSS精灵图" class="headerlink" title="CSS精灵图"></a>CSS精灵图</h1><p>精灵图：将某个网站的多张图片集中到一张图片上，前端课利用CSS的定位等布局来显示对应的图片部分，减少前端请求服务端的次数（前端性能优化的一种）</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>border图形（制图）</tag>
        <tag>CSS精灵图</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（二）</title>
    <url>/2022/05/29/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="单行文字省略号显示"><a href="#单行文字省略号显示" class="headerlink" title="单行文字省略号显示"></a>单行文字省略号显示</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 主要代码 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/*  或者（根据多行行文字省略号显示修改） */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* overflow: hidden;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    text-overflow: ellipsis;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    display: -webkit-box;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    -webkit-line-clamp: 1;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    -webkit-box-orient: vertical; */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="多行行文字省略号显示"><a href="#多行行文字省略号显示" class="headerlink" title="多行行文字省略号显示"></a>多行行文字省略号显示</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 主要代码 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 设置第几行的文字显示省略号 */</span></span></span><br><span class="line"><span class="language-css">    -webkit-line-clamp: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 设置方向 */</span></span></span><br><span class="line"><span class="language-css">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容测试内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="行内非替换元素的特殊性"><a href="#行内非替换元素的特殊性" class="headerlink" title="行内非替换元素的特殊性"></a>行内非替换元素的特殊性</h1><p>行内非替换元素：span、a、string、i等 </p>
<h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>测试内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">测试内容之后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  div的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给span标签设置padding，在浏览器打开，看上去span盒子<strong>被撑开</strong>了，实则padding-top&#x2F;padding-bottom仅仅是呈现出来，并未生效。</p>
<p>即：<strong>行内非替换元素的padding-top和padding-bottom不占据空间，左右padding会占据空间</strong></p>
<h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><p>上下会被撑起来，但是不占据空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">30px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>测试内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">测试内容之后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  div的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>margin上下不生效，左右生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>测试内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">测试内容之后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  div的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h1><h2 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child()"></a>:nth-child()</h2><p>:nth-child(关于n的表达式)</p>
<p><strong>n是自然数，从0开始</strong>，n是固定的，不能写为其他字母；表达式也可以是一个常数；<strong>元素的索引从1开始</strong></p>
<p>例如：1表示第一个元素，2n（even）表示第偶数个元素，2n+1（odd）表示第奇数个元素，-n + 5 表示前五个元素</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：ul li:nth-child(2n)的选择方式：先将ul中的所有偶数个子元素选择，再依次判断被选中的子元素是否为li标签</p>
<h2 id="nth-last-child"><a href="#nth-last-child" class="headerlink" title=":nth-last-child()"></a>:nth-last-child()</h2><p>对比于:nth-child，**:nth-child()是从前往后数；:nth-last-child是从后往前数**</p>
<p>:nth–last-child(关于n的表达式)</p>
<p><strong>n是自然数，从0开始</strong>，n是固定的，不能写为其他字母；表达式也可以是一个常数；</p>
<p>例如：1表示最后一个元素，2n（even）表示倒数偶数个元素，2n+1（odd）表示倒数奇数个元素，-n + 5 表示后五个元素</p>
<h2 id="nth-of-type"><a href="#nth-of-type" class="headerlink" title=":nth-of-type()"></a>:nth-of-type()</h2><p>与:nth-child()，不同点是该结构伪类选择器只计算同种类型的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    内容3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述代码中，“内容3”将被渲染为红色</p>
<h2 id="其他结构伪类"><a href="#其他结构伪类" class="headerlink" title="其他结构伪类"></a>其他结构伪类</h2><h3 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a>:first-child</h3><p>等同于:nth-child(1)</p>
<h3 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h3><p>等同于:nth-last-child(1)</p>
<h3 id="first-of-type"><a href="#first-of-type" class="headerlink" title=":first-of-type"></a>:first-of-type</h3><p>等同于:nth-of-type(1)</p>
<h3 id="last-of-type"><a href="#last-of-type" class="headerlink" title=":last-of-type"></a>:last-of-type</h3><p>等同于:nth-last-of-type(1)</p>
<h3 id="only-child"><a href="#only-child" class="headerlink" title=":only-child"></a>:only-child</h3><p>父元素中唯一的子元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:only-child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>“内容1”将被渲染为红色</strong></p>
<p>:only-of-type，是父元素中唯一的这种类型的子元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-pseudo">:only-of-type</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>内容5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<p><strong>“内容1”“内容2”“内容5”将被渲染为红色</strong></p>
<h3 id="root"><a href="#root" class="headerlink" title=":root"></a>:root</h3><p>根元素，就是html元素</p>
<h3 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h3><p>代表里面完全空白的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box:empty &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    p标签的内容</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>以上代码，第一个.box的样式会被应用</p>
<h3 id="not"><a href="#not" class="headerlink" title=":not()"></a>:not()</h3><p>否定伪类</p>
<p>:not(x)</p>
<p>x是一个简单选择器<br>元素选择器、通用选择器、属性选择器、类选择器、id选择器、伪类（除否定伪类)</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>行内块（或非替换）元素的特殊性</tag>
        <tag>结构伪类</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（五）</title>
    <url>/2022/06/05/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="浮动规则"><a href="#浮动规则" class="headerlink" title="浮动规则"></a>浮动规则</h1><ul>
<li>元素浮动后，会脱离标准流；会向左或向右移动，直到自己的边界紧贴着包含块（一般是父元素）或者其他浮动元素的边界为止</li>
<li>定位元素（position不是static的元素）会层叠在浮动元素上面</li>
<li>浮动的元素不能超过包含块</li>
<li>浮动元素不能层叠<ul>
<li>如果一个元素浮动，另一个浮动元素已经在那个位置了，后浮动的元素将紧贴着前一个浮动元素（左浮找左浮，右浮找右浮)</li>
<li>如果水平方向剩余的空间不够显示浮动元素，浮动元素将向下移动（换行），直到有充足的空间为止</li>
</ul>
</li>
<li>浮动元素不能与行内级内容层叠，行内级内容将会被浮动元素推出比如行内级元素、 inline-block元素、块级元素的文字内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  测试111测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>行内级元素、inline-block元素浮动后，其顶部将与所在行的顶部对齐</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  测试111测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  测试111测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h1 id="消除同一行的行内级元素之间的空隙"><a href="#消除同一行的行内级元素之间的空隙" class="headerlink" title="消除同一行的行内级元素之间的空隙"></a>消除同一行的行内级元素之间的空隙</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>默认情况下，span之间会存在一定空隙，原因是span元素换行导致的</strong></p>
<p>消除空隙的方法：</p>
<h2 id="取消换行"><a href="#取消换行" class="headerlink" title="取消换行"></a>取消换行</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不推荐，代码可读性变差</p>
<h2 id="父盒子设置字体"><a href="#父盒子设置字体" class="headerlink" title="父盒子设置字体"></a>父盒子设置字体</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺点：子行内级元素需要重新设置字体</p>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h1 id="浮动布局案例"><a href="#浮动布局案例" class="headerlink" title="浮动布局案例"></a>浮动布局案例</h1><p>公式：父盒子的宽度 &#x3D; 子盒子的宽度 + margin-left + margin-right</p>
<p>此处”子盒子的宽度”为子盒子的所有宽度（包括padding，border，不包括margin-left&#x2F;right）</p>
<p>场景：最外层的父盒子的宽度为1190px；浮动的元素宽度为230px；</p>
<h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-class">.no-margin</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item no-margin&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果<div class="item">1</div>不止有五个（可能五的倍数），此时需要将.container .item.no-margin属性进行修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是（弊端），:nth-child(5n)具有兼容性问题</p>
<h2 id="改进（利用上述公式）"><a href="#改进（利用上述公式）" class="headerlink" title="改进（利用上述公式）"></a>改进（利用上述公式）</h2><p>浮动，一般浏览器都支持 </p>
<p>公式：父盒子的宽度 &#x3D; 子盒子的宽度 + margin-left + margin-right</p>
<p>将 “”<div class="item">1</div>“每五个嵌套一个父盒子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS样式修改如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原因：</p>
<p>公式：父盒子的宽度 &#x3D; 子盒子的宽度 + margin-left + margin-right</p>
<p>​            1190                &#x3D;      auto                          0                     -10</p>
<p>类名为box的盒子没有声明宽度，则其宽度默认为auto，经浏览器计算，auto &#x3D; 1200px</p>
<p>而1200px &#x3D; (230 + 10) * 5，五个盒子恰好没有溢出 </p>
<h3 id="改进的其他写法："><a href="#改进的其他写法：" class="headerlink" title="改进的其他写法："></a>改进的其他写法：</h3><p>与改进的写法大同小异</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* item盒子左右均5px，margin-left/right不会塌陷 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>使用了浮动，会引入父盒子高度塌陷的问题。</p>
<p>因为在盒子浮动后，会脱离标准流，不在向父元素汇报高度，导致父元素的高度为0（称为高度塌陷）</p>
<p>清除浮动的属性：<strong>clear</strong></p>
<p><strong>clear属性来规定新的盒子必须添加到浮动的元素之下</strong></p>
<p>以下为清除浮动的最佳方案（伪元素清除）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.clear-fix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 共有css */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 考虑兼容性 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 清除浮动兼容IE 6/7 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.clear-fix</span> &#123;</span></span><br><span class="line"><span class="language-css">    *zoom: <span class="number">1</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clear-fix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其他方法：</p>
<ul>
<li>额外添加一个标签，弊端：如果存在多个浮动的盒子，需要添加多个标签，维护麻烦</li>
<li>给父元素设置固定高度（不推荐）</li>
<li>BFC</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .box .item &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    float: left;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS浮动</tag>
        <tag>行内级元素默认间隙清除</tag>
        <tag>清除浮动</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（八）</title>
    <url>/2022/06/25/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h1><h2 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h2><p>visual viewport</p>
<p>移动端的可视视口。（即移动端的可视区域）</p>
<h2 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h2><p>layout viewport</p>
<p>布局视口是相对于移动端的定义，由<code>meta</code>标签来决定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>移动端设备的视口相对于浏览器小，我们在一个网页html页面设置一个宽高均为100px的盒子，在浏览器使用终端切换到移动端，并任意切换移动端的宽度值，在没有以上代码的情况下，这个盒子也会进行一定缩放（违背常理）</p>
<p>原因：</p>
<ul>
<li>在没有设置 <meta name="viewport" content="width=device-width, initial-scale=1.0">时，布局视口的默认宽度为980px（当然移动端设备通常没有980px，且比980px小），在用户进行页面布局时，为了将页面完整的显示在移动端的设备中，会将980px宽度刚好全部放入移动端的视觉视口（对这个页面进行缩小），同时盒子的宽高进行同比例的缩放。</li>
<li>布局视口的默认宽度为980px</li>
</ul>
<h3 id="设置布局视口"><a href="#设置布局视口" class="headerlink" title="设置布局视口"></a>设置布局视口</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=200px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>呈现效果如下：刚好占据一半，布局视口小于384px，为了将页面整个放入移动端，此时会进行放大，然后放入视觉视口，盒子的宽度为100px，占据视觉视口200px的一半，所以看上去就占据了移动端一半的宽度。</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220625201628769.png" alt="呈现效果"></p>
<h2 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h2><p>ideal viewport</p>
<p>但是，由于移动端设备种类繁多，所以布局视口的宽度默认设置为当前移动设备的可视视口</p>
<p>即：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当视觉视口和布局视口的宽度一致时，称为理想视口。</p>
<h2 id="meta的其他属性"><a href="#meta的其他属性" class="headerlink" title="meta的其他属性"></a>meta的其他属性</h2><p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220625203419485.png" alt="meta的其他属性"></p>
<p>这些属性都属于name&#x3D;’viewport’，在设置多个不同的值时，在content里用”,”或者”;”隔开。</p>
<p>有些浏览器不支持<code>user-scalable</code>属性，在开发者想禁用缩放时，可以如下设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h1><h2 id="百分比设置"><a href="#百分比设置" class="headerlink" title="百分比设置"></a>百分比设置</h2><ul>
<li>因为不同属性的百分比值，相对的可能是不同参照物，所以百分比往往很难统一;</li>
<li>所以百分比在移动端适配中使用是非常少的;</li>
</ul>
<h2 id="rem单位-动态html的font-size"><a href="#rem单位-动态html的font-size" class="headerlink" title="rem单位+动态html的font-size"></a>rem单位+动态html的font-size</h2><p>rem是针对于根元素（html&#x2F;:root）的字体大小作为依据的，1rem就是html字体大小的一倍，以此类推。</p>
<p>区分于em，em是相对于当前盒子本身字体大小的作为依据，1em就是当前字体大小的1倍，以此类推。</p>
<p>如果我们需要在不同的屏幕下有不同的尺寸，可动态修改html的font-size尺寸，配合rem来进行适配。</p>
<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p><strong>现有如下案例：</strong></p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220625210641713.png" alt="案例"></p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">375px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">37.5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">320px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">417px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">41.4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以通过媒体查询来设置不同尺寸范围内的屏幕html的font-size尺寸;</p>
<p><strong>缺点:</strong></p>
<ul>
<li>1.我们需要针对不同的屏幕编写大量的媒体查询;</li>
<li>2.如果动态改变尺寸，不会实时的进行更新（在一定的范围内尺寸不会发生变化）。</li>
</ul>
<h3 id="js实现"><a href="#js实现" class="headerlink" title="js实现"></a>js实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js </span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setRemUnit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// html根</span></span><br><span class="line">    <span class="keyword">let</span> htmlEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">    <span class="comment">// 获得客户端宽度</span></span><br><span class="line">    <span class="keyword">let</span> clientWidth = htmlEl.<span class="property">clientWidth</span>;</span><br><span class="line">    <span class="comment">// 动态计算根字体大小，（此处为屏幕宽度的十分之一）</span></span><br><span class="line">    <span class="keyword">const</span> rootFontSize = clientWidth / <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="property">fontSize</span> = rootFontSize;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 页面加载完成就要调用</span></span><br><span class="line">  <span class="title function_">setRemUnit</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, setRemUnit);</span><br><span class="line">  <span class="comment">// 用于监听移动端的页面跳转（页面的大小可能会有变化，但是如果浏览器有缓存，就会造成新页面的布局出现问题，所以需要重新计算rem）</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示页面有缓存</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">persisted</span>) &#123;</span><br><span class="line">      <span class="title function_">setRemUnit</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.test-box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">5rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./test.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试测试测试测试测试测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test-box&quot;</span>&gt;</span>测试盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处字体大小也会发生变化，继承了html根元素的字体大小</p>
<p>参考：<a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></p>
<p>由于<code>viewport</code>单位（vw和vh）得到众多浏览器的兼容，<code>lib-flexible</code>这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用<code>viewport</code>来替代此方。</p>
<h2 id="vw单位"><a href="#vw单位" class="headerlink" title="vw单位"></a>vw单位</h2><p>vw是相对于可视区的宽度的百分比。</p>
<p>使用vw可以替换rem，但是vw也有一定的弊端：</p>
<ul>
<li>vw一定是相对于视口的；</li>
<li>在某些场景下，我们想要有一个最值，即：屏幕宽度达到一个最大值，页面的元素不要再变大了；</li>
<li>在rem的情况下，可以使用媒体查询来限制继续放大；</li>
<li>使用vw放大不能停止放大。</li>
</ul>
<p>rem事实上是作为一种移动端适配的一种过度方案，利用的也是vw的思想。</p>
<p><strong>vw相比于rem的优势：</strong></p>
<ul>
<li>优势一:不需要去计算html的font-size大小，也不需要给html设置这样一会font-size;</li>
<li>优势二:不会因为设置html的font-size大小，而必须给body再设置一个font-size，防止继承;<ul>
<li>因为rem会给根<code>html</code>设置一个字体大小，其所有的子元素如果没有设置字体大小都会继承html的字体（很大），所以使用rem方法时，会在body重新设置一个字体，使其子元素的字体大小继承于<code>body</code></li>
</ul>
</li>
<li>优势三∶因为不依赖font-size的尺寸，所以不用担心某些原因html的font-size尺寸被篡改，页面尺寸混乱;</li>
<li>优势四: vw相比于rem更加语义化，1vw刚才是1&#x2F;100的viewport的大小;</li>
<li>优势五:可以具备rem之前所有的优点;</li>
</ul>
<h2 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h2>]]></content>
      <categories>
        <category>CSS</category>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端视口</tag>
        <tag>移动端适配</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（六）</title>
    <url>/2022/06/07/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="用在flex-container上的属性"><a href="#用在flex-container上的属性" class="headerlink" title="用在flex-container上的属性"></a>用在flex-container上的属性</h1><p>main axis：主轴</p>
<p>main start</p>
<p>main end</p>
<p>cross axis：交叉轴</p>
<p>cross start</p>
<p>cross end</p>
<h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>设置主轴的方向</p>
<p>可取的值：</p>
<ul>
<li>row（默认）行</li>
<li>row-reverse（行反转）</li>
<li>column（列）</li>
<li>column-reverse（列反转）</li>
</ul>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>决定flex-item是否换行</p>
<p>可取的值：</p>
<ul>
<li>nowrap（默认）单行</li>
<li>wrap（多行）</li>
<li>wrap-reverse（多行，对比wrap，从父盒子的底部开始排列）</li>
</ul>
<p>当父盒子设置了固定的宽，子盒子也设置了固定的宽，如果所有子盒子的宽度和&lt;父盒子的宽度</p>
<p>如果flex-wrap取值为<code>nowrap</code>（不换行），则子盒子的宽度会被压缩，被挤在父盒子的第一层</p>
<p>即：<strong>元素最终展示出来的宽度和width有关系,但是没有必然性</strong></p>
<p>这就引出了一个问题，如果子盒子的宽度和 &lt; 父盒子，为什么子盒子没有被拉伸?</p>
<p><strong>这就和“<code>flex-grow</code>”属性有关了</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-wrap</span>: nowrap;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-direction和flex-wrap的简写属性</p>
<p>顺序任何，并且可以省略</p>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>决定flex-item在主轴的排列方式</p>
<p>可取的值：</p>
<ul>
<li>space-between（flex-items之间距离相等，同时main start，main end两端对齐）</li>
<li>space-around（flex-items之间距离相等，flex-items与main start和main end的距离是flex-items之间距离的一半）</li>
<li>space-evenly（flex-items之间距离相等，flex-items与main start和main end的距离等于flex-items之间距离）</li>
<li>flex-start（main start开始排列）</li>
<li>flex-end（main end开始排列）</li>
<li>center（居中）</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220607175105798.png" alt="justify-content呈现"></p>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>决定flex-items在交叉轴的对齐方式（单行）</p>
<p>可取的值：</p>
<ul>
<li>normal:在弹性布局中，效果和stretch一样</li>
<li>stretch: 当flex items在交叉轴方向的高度或者宽度为auto 时，会自动拉伸至填充flex container；如果设置了具体值，该属性无效；</li>
<li>flex-start: 与cross start对齐</li>
<li>flex-end: 与cross end对齐</li>
<li>center:居中对齐</li>
<li>baseline:与基准线对齐</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220607200309934.png" alt="align-items"></p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>align-content决定了多行flex items在交叉轴的对齐方式，用法与justify-content类似</p>
<ul>
<li>stretch(默认值):与align-items的stretch类似</li>
<li>flex-start: 与cross start对齐</li>
<li>flex-end: 与cross end对齐</li>
<li>center:居中对齐</li>
<li>space-between:<ul>
<li>flex items 之间的距离相等</li>
<li>与cross start、cross end两端对齐</li>
</ul>
</li>
<li>space-around:<ul>
<li>flex items之间的距离相等</li>
<li>flex items 与cross start、cross end之间的距离是flex items之间距离的一半</li>
</ul>
</li>
<li>space-evenly:<ul>
<li>flex items之间的距离相等</li>
<li>flex items与cross start、cross end 之间的距离等于flex items之间的距离</li>
</ul>
</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220607202854284.png" alt="align-content呈现"></p>
<h1 id="用在flex-items上的属性"><a href="#用在flex-items上的属性" class="headerlink" title="用在flex-items上的属性"></a>用在flex-items上的属性</h1><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p>决定items的排布顺序，数字越小越优先排布，反正越靠后排布</p>
<p>默认为0</p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>在父盒子确定flex-items排布的情况下，这个属性决定flex-items自身在父盒子交叉轴中的排布方式</p>
<p>也可理解为：该属性会覆盖align-items的值</p>
<p>可取的值：</p>
<ul>
<li><p>auto（遵从align-items的设置）</p>
</li>
<li><p>stretch（flex-items在交叉轴方向的高度或者宽度未设置的情况下，会拉伸）</p>
</li>
<li><p>center</p>
</li>
<li><p>flex-start</p>
</li>
<li><p>flex-end</p>
</li>
<li><p>baseline</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-self</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span><span class="selector-class">.item3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>flex-grow决定了flex items 如何扩展(拉伸&#x2F;成长)；</p>
<p>可以设置任意非负数字(正小数、正整数、0)，默认值是0，如果子盒子没有设置宽度，则宽度是包裹内容的宽度，否则是设置的宽度。<br>当flex container在main axis方向上有剩余size时，flex-grow属性才会有效</p>
<p><strong>注意：</strong>扩展后的宽度不能超过max-width&#x2F;height</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 将父盒子的剩余宽度分配给item2 */</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span><span class="selector-class">.item3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 将剩余宽度平均分配给flex items */</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 将剩余宽度分为四份，两份给item2,另外两份分别给item1和item3 */</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span><span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p>是flex-grow的反向操作</p>
<p>决定flex items如何压缩</p>
<p>默认会压缩（即默认值1，0表示不压缩）</p>
<p><strong>注意：</strong>压缩后的值不能小于min-width&#x2F;s</p>
<h2 id="flex-basis（不常用）"><a href="#flex-basis（不常用）" class="headerlink" title="flex-basis（不常用）"></a>flex-basis（不常用）</h2><p>用于设置flex items在主轴的基础尺寸</p>
<p>默认值为auto，也可以取具体的数值</p>
<p>决定flex item最终的尺寸的优先级：</p>
<ul>
<li>max-width\max-height\min-width\min-height</li>
<li>flex-basis</li>
<li>width&#x2F;height</li>
<li>内容本身的size</li>
</ul>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex-grow || flex-shrink |l flex-basis 的简写,flex 属性可以指定1个，2个或3个值。</p>
<p><strong>单值语法</strong>:</p>
<p>值必须为以下其中之一:</p>
<p>一个无单位数(<number>):它会被当作<flex-grow>的值。</p>
<p>一个有效的宽度(width)值:它会被当作 <flex-basis>的值。关键字none，auto或initial.</p>
<p><strong>双值语法</strong>:</p>
<p>第一个值必须为一个无单位数，并且它会被当作<flex-grow>的值。</p>
<p>第二个值必须为以下之—:</p>
<p>一个无单位数:它会被当作<flex-shrink>的值。</p>
<p>一个有效的宽度值:它会被当作<flex-basis>的值。</p>
<h1 id="水平垂直居中总结"><a href="#水平垂直居中总结" class="headerlink" title="水平垂直居中总结"></a>水平垂直居中总结</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ul>
<li>行内级元素：text-align:center</li>
<li>块级元素：margin:0 auto</li>
<li>决定定位的元素：该元素有宽度，设置其css样式为：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    selector&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>flex布局：justify-content: center</li>
</ul>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ul>
<li><h2 id="绝对定位，该元素有高度，设置其css样式为"><a href="#绝对定位，该元素有高度，设置其css样式为" class="headerlink" title="绝对定位，该元素有高度，设置其css样式为:"></a>绝对定位，该元素有高度，设置其css样式为:</h2></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    selector&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    	<span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>flex布局：align-items:center</li>
<li>transform&amp;&amp;top</li>
</ul>
<p>注：transform值如果取百分比，相对于的宽度或者高度是自身宽度或者高度的百分比。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    selector&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="水平垂直居中使用定位的弊端"><a href="#水平垂直居中使用定位的弊端" class="headerlink" title="水平垂直居中使用定位的弊端"></a>水平垂直居中使用定位的弊端</h2><ul>
<li>必须使用定位，脱离了标准流；</li>
<li>必须给元素设置宽或者高，如果不设置宽和高，则该元素的宽高会被拉伸成父元素（包含块）盒子的宽度或者高度；</li>
</ul>
<h2 id="flex水平垂直居中的弊端"><a href="#flex水平垂直居中的弊端" class="headerlink" title="flex水平垂直居中的弊端"></a>flex水平垂直居中的弊端</h2><ul>
<li>flex盒子内所有的盒子都会被垂直或者水平居中，无法针对特定的子元素盒子（虽然可以使用align-self来解决，但是在子元素非常多的情况下，不见得很方便）；</li>
<li>相对来说，有兼容性问题（基本可以忽略）。</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
        <category>flex布局</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>flex</tag>
        <tag>弹性盒子布局</tag>
        <tag>flex布局</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记（四）</title>
    <url>/2022/06/03/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="标准流布局"><a href="#标准流布局" class="headerlink" title="标准流布局"></a>标准流布局</h1><p>默认情况下，元素都是按照normal flow(标准流、常规流、正常流、文档流【document flow】）进行排布</p>
<ul>
<li><p>块级元素独占一行、行内元素、行内块元素从左至右排列；</p>
</li>
<li><p>从左到右、从上到下按顺序摆放好；</p>
</li>
<li><p>默认情况下，互相之间不存在层叠现象。</p>
</li>
</ul>
<p>脱标：定位、浮动的元素都会脱离标准流布局</p>
<h1 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h1><p>relative</p>
<p>相对于自身之前的位置进行定位。</p>
<h1 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h1><p>fixed</p>
<p>相对于浏览器视口进行定位</p>
<h1 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h1><p>absolute</p>
<p>相对于position设置为非static的父元素进行定位，若父元素均没有进行position设置，则相对于浏览器视口进行定位（类似于fixed）</p>
<h2 id="position为absolute和fixed的特点"><a href="#position为absolute和fixed的特点" class="headerlink" title="position为absolute和fixed的特点"></a>position为absolute和fixed的特点</h2><ul>
<li>可以随意设置宽高</li>
<li>如果没有设置宽高，默认由内容决定</li>
<li>不再受标准流的约束<ul>
<li>不再严格按照从左至右、从上至下排布</li>
<li>不再严格区分块级、行内级；块级、行内级的很多特性都会消失</li>
</ul>
</li>
<li>不再给父元素汇报宽高，即：脱标后，不再占据父元素盒子的高度；</li>
<li>脱标元素内部还是按照标准流布局。</li>
<li>公式：定位参照对象的宽度 &#x3D; left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度<br>公式：定位参照对象的高度 &#x3D; top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</li>
</ul>
<p>注:width，height在不设置的情况下，其默认值均为auto，即由浏览器决定其宽度和高度（参看mdn文档）</p>
<p><strong>（重要）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>a盒子的宽度&#x3D;b盒子的宽度 + left + right + margin-left + margin-right</p>
<p>500                    auto               0        0                    0                     0</p>
<p>盒子的宽度未设置值，默认为auto，则此处auto &#x3D; 500</p>
<p>参看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width">https://developer.mozilla.org/zh-CN/docs/Web/CSS/width</a></p>
<p>利用该公式，我们可以让定位盒子居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>a盒子的宽度&#x3D;b盒子的宽度 + left + right + margin-left + margin-right</p>
<p>500                 100                      0        0                    auto          auto</p>
<p>margin-left&#x2F;right的值为auto，浏览器会自动平均分配剩余的宽度值</p>
<p>类似的情况，我们可以让定位盒子的高度等于父定位盒子的高度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以让定位盒子在竖直方向居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以让定位盒子在父定位盒子中水平垂直居中</p>
<h3 id="让盒子垂直居中的第一种方案"><a href="#让盒子垂直居中的第一种方案" class="headerlink" title="让盒子垂直居中的第一种方案"></a>让盒子垂直居中的第一种方案</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果想让子定位元素和父盒子一致，参看以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="width取值为auto的不同场景"><a href="#width取值为auto的不同场景" class="headerlink" title="width取值为auto的不同场景"></a>width取值为auto的不同场景</h2><ul>
<li>行内非替换元素：宽度为包裹内容的宽度</li>
<li>块级元素：宽度为包含块的宽度</li>
<li>绝对定位元素：宽度为包裹内容的宽度</li>
</ul>
<h1 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h1><p>sticky</p>
<h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><p><strong>z-index只对定位元素有效</strong></p>
]]></content>
      <categories>
        <category>CSS</category>
        <category>定位</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS定位</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS前瞻</title>
    <url>/2022/07/25/HTTPS%E5%89%8D%E7%9E%BB/</url>
    <content><![CDATA[<h1 id="网络传输的安全性"><a href="#网络传输的安全性" class="headerlink" title="网络传输的安全性"></a>网络传输的安全性</h1><p>由于 HTTP 天生“明文”的特点，整个传输过程完全透明，任何人都能够在链路中截获、修改或者伪造请求 &#x2F; 响应报文，数据不具有可信性。</p>
<p>黑客，代理可在数据传输的任意节点对数据进行拦截，因为HTTP是明文传输，只要拦截成功，就可以修改请求或者响应报文</p>
<img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725111050930.png" alt="黑客截胡" style="zoom:80%;" />

<h1 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h1><ul>
<li>HTTP协议：不安全，未加密</li>
<li>HTTPS协议：安全，对请求报文和响应报文做加密</li>
</ul>
<p>加密的方式有对称加密和非对称加密。</p>
<h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>顾名思义：<strong>加密和解密使用同一把密钥</strong></p>
<ul>
<li>特点：<ul>
<li>加密使用相同密钥</li>
<li>高效，适用于大量数据加密的场景</li>
<li>算法公开，安全性取决于密钥大小，但是密钥越大效率越低，需要在安全以及效率角度做权衡</li>
</ul>
</li>
<li>缺点：<ul>
<li>算法本身安全，但是应用场景不安全，因为加密和解密使用的是同一个密钥</li>
</ul>
</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725111533029.png" alt="对称加密算法"></p>
<p>如果使用对称加密算法，浏览器在第一次请求的时候，就需要携带密钥，将密钥告知服务端，此过程，黑客仍然科技截胡，获得密钥。</p>
<p>在之后的请求与响应中，黑客已经获得了密钥，同时也可以获得密文，加密多此一举，黑客仍然可以解密。</p>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>使用匹配的一对密钥来分别进行加密和解密，这两个秘钥是公开密钥(public key，简称公钥)和私有密钥(private key，简称私钥)</p>
<p>算法:RSA、ECC、Elgamal、背包算法、Rabin、D-H等</p>
<ul>
<li>特点:<ul>
<li>安全性高</li>
<li><strong>公钥加密的数据只能用对应的私钥解密，同理，私钥加密的数据只能用对应的公钥解密</strong></li>
</ul>
</li>
<li>缺点:加解密复杂，效率低，耗时较长，不适用于大量数据加密的场景</li>
<li>用法概要:<ul>
<li>加密:对数据做加密。</li>
<li>签名:证明数据是谁发的</li>
</ul>
</li>
</ul>
<h3 id="非对称加密的使用"><a href="#非对称加密的使用" class="headerlink" title="非对称加密的使用"></a>非对称加密的使用</h3><p>首先需要生成<strong>一对匹配的公钥和私钥</strong>（公钥只能由私钥生成，私钥不公开）</p>
<h4 id="公开公钥"><a href="#公开公钥" class="headerlink" title="公开公钥"></a>公开公钥</h4><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725120348290.png" alt="公开公钥" style="zoom:80%;" />

<p>当然，黑客也可以拿到公钥，但是公钥的用途是进新加密，无法进行解密。</p>
<h4 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h4><p>场景：用来对数据进行加密传输</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725121745128.png" alt="加密传输"></p>
<p>注意：</p>
<ul>
<li>因为公钥加密数据只有对应的私钥才能解密，所以密文很安全</li>
<li>如果在网络上互相发送密文，可以让对方也发送其自身的公钥，用对方的公钥来加密。</li>
</ul>
<h4 id="私钥签名"><a href="#私钥签名" class="headerlink" title="私钥签名"></a>私钥签名</h4><p>完成身份认证。</p>
<p>场景：将公钥公布后，同时需要证明公钥是自己发的</p>
<p><code>第一步：</code>服务端用自身的私钥对明文的hash值进行加密，把密文（签名）和明文一起发送给客户端</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725133641069.png" alt="第一步"></p>
<p><code>第二步：</code>客户端用服务端的公钥进行解密，解密后的明文hash值（使用和服务端同样的哈希算法，计算明文的hash会得到同样的结果）和接收到的明文的hash值进行对比，如果一样则是服务端发的</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725134015918.png" alt="第二步"></p>
<h1 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h1><p>如果服务端生成的公钥通过响应报文传递，结果是这样的：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725140016678.png" alt="错误传递"></p>
<p>如何解决？</p>
<p>牵扯到认证方式的问题。</p>
<h2 id="认证机构"><a href="#认证机构" class="headerlink" title="认证机构"></a>认证机构</h2><p>就毕业就业问题来举例：</p>
<p>当我们入职时，入职hr会查看我们的学历是否造假，这就需要一个权威的平台来对我们自身的身份进行认证，这个权威的平台就是学信网。</p>
<p>在HTTPS中，这个权威平台叫做<strong>认证机构</strong>（根节点）（全球所有企业都认为其是有权威的）</p>
<ul>
<li>认证机构在全球只有几家，单由这几家公司是管理不过来的，所以其下会有一级二级的节点，这些节点都通过这些认证机构认证过（可以理解为代理商）</li>
</ul>
<p>浏览器为了确认数据时服务端发送的， 会去认证机构去确认，具体的确认过程见下。</p>
<img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/HTTPS%E5%89%8D%E7%9E%BB.assets/image-20220725144236630.png" alt="HTTPS认证以及请求流程" style="zoom:150%;" />

<p>具体文字描述：</p>
<p>前提条件：服务端的<font color=blue>公钥A</font>和<font color=green>私钥A</font>，认证机构的<font color=red>公钥B</font>和<font color=pink>私钥B</font>，<font color=deeppink>客户端会话密钥</font></p>
<ol>
<li>公司将服务器的域名，<font color=blue>服务器公钥A</font>，认证时长等信息提交给认证机构</li>
<li>认证机构使用<font color=pink>私钥B</font>将服务端提交的信息加密，<strong>生成证书</strong></li>
<li>认证机构将<font color=red>公钥B</font>交给客户端</li>
<li>客户端发送预请求，向服务端请求证书</li>
<li>服务端发送证书</li>
<li>客户端利用<font color=red>公钥B</font>将证书解密，拿到服务端域名、<font color=blue>服务端公钥A</font>等信息</li>
<li>客户端使用<font color=blue>公钥A</font>，对<font color=deeppink>会话密钥</font>进行加密</li>
<li>客户端将加密后的会话密钥发送给服务端</li>
<li>服务端利用<font color=green>私钥A</font>对加密的会话密钥进行解密，拿到<font color=deeppink>会话密钥</font></li>
<li>服务端告知客户端收到<font color=deeppink>会话密钥</font></li>
<li>双方使用会话密钥进行<strong>对称加密</strong>的数据请求与响应</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTPS</category>
        <category>HTTPS</category>
        <category>对称加密</category>
        <category>非对称加密</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
        <tag>对称加密</tag>
        <tag>非对称加密</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS学习笔记（一）</title>
    <url>/2022/07/25/HTTPS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="HTTPS特性"><a href="#HTTPS特性" class="headerlink" title="HTTPS特性"></a>HTTPS特性</h1><ul>
<li><strong>机密性</strong>：（Secrecy&#x2F;Confidentiality）数据的“保密”，只能由可信的人访问，对其他人是不可见的“秘密”，简单来说就是不能让不相关的人看到不该看的东西。</li>
<li><strong>完整性&#x2F;一致性</strong>：（Integrity）数据在传输过程中没有被篡改，不多也不少，“完完整整”地保持着原状。</li>
<li><strong>身份认证</strong>：（Authentication）确认对方的真实身份，也就是“证明你真的是你”，保证消息只能发送给可信的人。</li>
<li><strong>不可否认</strong>：（Non-repudiation&#x2F;Undeniable）也叫不可抵赖，意思是不能否认已经发生过的行为，不能“说话不算数”“耍赖皮”。</li>
</ul>
<p>HTTP的默认端口号：<strong>443</strong></p>
<p>HTTP的默认端口号：<strong>80</strong></p>
<p>HTTP下层的传输协议：<strong>TCP&#x2F;IP</strong></p>
<p>HTTPS下层的传输协议：<strong>SSL&#x2F;TLS</strong></p>
<h1 id="SSL-x2F-TLS"><a href="#SSL-x2F-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h1><p><strong>SSL</strong> ：即安全套接层（Secure Sockets Layer），在 OSI 模型中处于第 5 层（会话层），由网景公司于 1994 年发明</p>
<p><strong>TLS</strong>：互联网工程组 IETF 在 1999 年把它改名为 TLS</p>
<p>浏览器和服务器在使用TLS建立连接时，需要选择一套恰当的加密算法来实现安全通信，这些算法的组合被称为：“<strong>密码套件</strong>”</p>
<p><strong>密码套件</strong>：密钥交换算法 + 签名算法 + 对称加密算法 + 摘要算法</p>
<p>除了HTTP，SSL&#x2F;TLS也可以承载其他的应用协议，例如FTP&#x3D;&gt;FTPS，LDAP&#x3D;&gt;LDAPS等。</p>
<h1 id="TLS中的对称加密算法"><a href="#TLS中的对称加密算法" class="headerlink" title="TLS中的对称加密算法"></a>TLS中的对称加密算法</h1><p>RC4、DES、3DES、AES、ChaCha20 等，但前三种算法都被认为是不安全的，通常都禁止使用，目前常用的只有<strong>AES 和 ChaCha20。</strong></p>
<ul>
<li><p><code>DES</code>和<code>AES</code>只能加密固定长度的明文</p>
</li>
<li><p><code>AES</code>： 的意思是“高级加密标准”（Advanced Encryption Standard），密钥长度可以是 128、192 或 256。它是 DES 算法的替代者，安全强度很高，性能也很好，而且有的硬件还会做特殊优化，所以非常流行，是应用最广泛的对称加密算法。</p>
</li>
<li><p><code>ChaCha20</code> ：是 Google 设计的另一种加密算法，密钥长度固定为 256 位，纯软件运行性能要超过 AES，曾经在移动客户端上比较流行，但 ARMv8 之后也加入了 AES 硬件优化，所以现在不再具有明显的优势，但仍然算得上是一个不错的算法。</p>
</li>
</ul>
<h3 id="加密分组模式"><a href="#加密分组模式" class="headerlink" title="加密分组模式"></a>加密分组模式</h3><p>可以让算法用固定长度的密钥加密任意长度的明文，把小秘密转化为大秘密。</p>
<p>最新的分组模式被称为 AEAD（Authenticated Encryption with Associated Data），在加密的同时增加了认证的功能，常用的是 GCM、CCM 和 Poly1305。</p>
<ul>
<li>AES128-GCM，意思是密钥长度为 128 位的 AES 算法，使用的分组模式是 GCM；</li>
<li>ChaCha20-Poly1305 的意思是 ChaCha20 算法，使用的分组模式是 Poly1305。</li>
</ul>
<h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>对称加密的问题：如何将密钥传递给对方？</p>
<p>这就需要非对称加密了。</p>
<p>有两个密钥，一个叫“公钥”（public key），一个叫“私钥”（private key）。</p>
<p>两个密钥是不同的，“不对称”，<strong>公钥可以公开给任何人使用，而私钥必须严格保密</strong>。</p>
<p>公钥和私钥有个特别的“单向”性，虽然都可以用来加密解密，但公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密。</p>
<p>相关算法：DH、DSA、RSA、ECC 等。</p>
<ul>
<li><code>RSA</code>：它的安全性基于“整数分解”的数学难题，使用两个超大素数的乘积作为生成密钥的材料，想要从公钥推算出私钥是非常困难的。10 年前 RSA 密钥的推荐长度是 1024，但随着计算机运算能力的提高，现在 1024 已经不安全，普遍认为至少要 2048 位。</li>
<li><code>ECC</code>（Elliptic Curve Cryptography）：是非对称加密里的“后起之秀”，它基于“椭圆曲线离散对数”的数学难题，使用特定的曲线方程和基点生成公钥和私钥，子算法 ECDHE 用于密钥交换，ECDSA 用于数字签名。<ul>
<li>目前比较常用的两个曲线是 P-256（secp256r1，在 OpenSSL 称为 prime256v1）和 x25519。P-256 是 NIST（美国国家标准技术研究所）和 NSA（美国国家安全局）推荐使用的曲线，而 x25519 被认为是最安全、最快速的曲线。</li>
<li>ECC 在安全强度和性能上都有明显的优势。160 位的 ECC 相当于 1024 位的 RSA，而 224 位的 ECC 则相当于 2048 位的 RSA。因为密钥短，所以相应的计算量、消耗的内存和带宽也就少，加密解密的性能就上去了，对于现在的移动互联网非常有吸引力。</li>
</ul>
</li>
</ul>
<h3 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h3><p><strong>混合加密实现了机密性</strong></p>
<p>混合加密的原因在于：非对称加密虽然解决了密钥交换的问题；但是，非对称加密是基于复杂的数学难题，运算速度很慢，即使是 ECC 也要比 AES 差上好几个数量级。如果仅用非对称加密，虽然保证了安全，但通信速度有如乌龟、蜗牛，实用性就变成了零。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plain = hello openssl</span><br><span class="line">count = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">aes_128_cbc enc/dec <span class="number">1000</span> times : <span class="number">51.</span>41ms, <span class="number">0.</span>25MB/s</span><br><span class="line"></span><br><span class="line">rsa_1024 enc/dec <span class="number">1000</span> times : <span class="number">105.</span>68ms, <span class="number">123.</span>02KB/s</span><br><span class="line"></span><br><span class="line">rsa_1024/aes ratio = <span class="number">2.06</span></span><br><span class="line"></span><br><span class="line">rsa_2048 enc/dec <span class="number">1000</span> times : <span class="number">580.</span>58ms, <span class="number">22.</span>39KB/s</span><br><span class="line"></span><br><span class="line">rsa_2048/aes ratio = <span class="number">11.29</span></span><br></pre></td></tr></table></figure>

<p>可以看到，RSA 的运算速度是非常慢的，2048 位的加解密大约是 15KB&#x2F;S（微秒或毫秒级），而 AES128 则是 13MB&#x2F;S（纳秒级），差了几百倍。</p>
<p>混合加密的步骤：</p>
<ol>
<li><p>在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题。（即服务端生成公钥和私钥，非对称算法将公钥传递给客户端）</p>
</li>
<li><p>然后用随机数产生对称算法使用的“会话密钥”（session key）（客户端生成），再用（服务端的）公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。</p>
</li>
<li><p>服务端拿到密文后用其私钥私钥解密，取出会话密钥。</p>
<img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/e41f87110aeea3e548d58cc35a478e85.webp" alt="混合加密" style="zoom: 33%;" /></li>
</ol>
<p>细节步骤参考：</p>
<p><a href='https://hourunmeng.github.io/2022/07/25/HTTPS%E5%89%8D%E7%9E%BB/'>HTTPS前瞻</a></p>
<h1 id="其他知识补充"><a href="#其他知识补充" class="headerlink" title="其他知识补充"></a>其他知识补充</h1><ul>
<li>比特币、以太坊等区块链技术里也用到了ECC（非对称加密），它们选择的曲线是secp256k1。</li>
<li>由于密码学界普遍不信任NIST和NSA，怀疑secp 系列曲线有潜在的弱点，所以研究出了“x25519”，它的名字来源于曲线方程里的参数“2^255 - 19”。另有一个更高强度的曲线“x448”，参数是“2^448 - 2^224 - 1”。</li>
<li>TLS1.2要求必须实现TLS_RSA_WITH_AES_128_CBC_SHA，TLS1.3要求必须实现TLS_AES_128_GCM_SHA256，并且因为前向安全的原因废除了DH和 RSA密钥交换算法。</li>
<li>非对称加密慢的原因：<ul>
<li>非对称加密基于大数运算，比如大素数或者椭圆曲线，是复杂的数学难题，所以消耗计算量，运算速度慢。 </li>
<li>除了慢，可能还有一个缺点就是需要更多的位数，相同强度的对称密钥要比非对称密钥短。</li>
<li>对称密钥一般都128位、256位，而rsa一般要2048位，不过椭圆曲线的会短一点。</li>
</ul>
</li>
<li>简单来说，SSL 就是通信双方通过非对称加密协商出一个用于对称加密的密钥（会话密钥）。<ul>
<li>会话密钥：即一次会话使用一次密钥，之前的都会被废弃，就算被别人破解了也仅仅是破解了一个会话。</li>
</ul>
</li>
</ul>
<p>参考文档：<a href="https://time.geekbang.org/column/article/109062">https://time.geekbang.org/column/article/109062</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTPS</category>
        <category>HTTPS</category>
        <category>对称加密</category>
        <category>SSL/TLS</category>
        <category>非对称加密</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
        <tag>对称加密</tag>
        <tag>非对称加密</tag>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTPS机密性问题</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（一）</title>
    <url>/2022/07/20/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>完整的HTTP报文格式：</p>
<p><img alt='完整的HTTP报文格式' src='https://hrmtest.oss-cn-beijing.aliyuncs.com/62e061618977565c22c2cf09930e1d3c.webp' style='width:600px'></img></p>
<p>示例：</p>
<p><img alt='示例' src='https://hrmtest.oss-cn-beijing.aliyuncs.com/b191c8760c8ad33acd9bb005b251a2df.webp' style='width:600px'></img></p>
<p><strong>响应报文的状态行、响应头、响应体分别和请求报文的起始行（请求行）、请求头、请求体对应。</strong></p>
<p>或者说：请求头 &#x3D; 请求行 + 请求头（头部字段）；响应头 &#x3D; 状态行 + 响应头（头部字段）</p>
<p>注意：头部字段是 key-value 的形式，用“:”分隔，不区分大小写，顺序任意，除了规定的标准头，也可以任意添加自定义字段，实现功能扩展。</p>
<h1 id="常用头字段"><a href="#常用头字段" class="headerlink" title="常用头字段"></a>常用头字段</h1><h2 id="通用字段"><a href="#通用字段" class="headerlink" title="通用字段"></a>通用字段</h2><p>在请求头和响应头里都可以出现</p>
<ul>
<li><strong>Date</strong>：但通常出现在响应头里，表示 HTTP 报文创建的时间，客户端可以使用这个时间再搭配其他字段决定缓存策略。</li>
</ul>
<h2 id="请求字段"><a href="#请求字段" class="headerlink" title="请求字段"></a>请求字段</h2><p>仅能出现在请求头里，进一步说明请求信息或者额外的附加条件</p>
<ul>
<li><strong>Host</strong>：告诉服务器这个请求应该由哪个主机来处理，当一台计算机上托管了多个虚拟主机的时候，服务器端就需要用 Host 字段来选择。唯一一个 HTTP&#x2F;1.1 规范里要求必须出现的字段，也就是说，如果请求头里没有 Host，那这就是一个错误的报文</li>
<li><strong>User-Agent</strong>：使用一个字符串来描述发起 HTTP 请求的客户端，服务器可以依据它来返回最合适此浏览器显示的页面。<ul>
<li>但由于历史的原因，User-Agent 非常混乱，每个浏览器都自称是“Mozilla”“Chrome”“Safari”，企图使用这个字段来互相“伪装”，导致 User-Agent 变得越来越长，最终变得毫无意义。</li>
<li>不过有的比较“诚实”的爬虫会在 User-Agent 里用“<strong>spider</strong>”标明自己是爬虫，所以可以利用这个字段实现简单的反爬虫策略。</li>
</ul>
</li>
</ul>
<h2 id="响应字段"><a href="#响应字段" class="headerlink" title="响应字段"></a>响应字段</h2><p>仅能出现在响应头里，补充说明响应报文的信息；</p>
<ul>
<li><strong>Server</strong>：告诉客户端当前正在提供 Web 服务的软件名称和版本号<ul>
<li>Server 字段也不是必须要出现的，因为这会把服务器的一部分信息暴露给外界，如果这个版本恰好存在 bug，那么黑客就有可能利用 bug 攻陷服务器。所以，有的网站响应头里要么没有这个字段，要么就给出一个完全无关的描述信息。</li>
</ul>
</li>
</ul>
<h2 id="实体字段"><a href="#实体字段" class="headerlink" title="实体字段"></a>实体字段</h2><p>它实际上属于通用字段，但专门描述 body 的额外信息。</p>
<ul>
<li><strong>Content-Length</strong>：它表示报文里 body 的长度，也就是请求头或响应头空行后面数据的长度。服务器看到这个字段，就知道了后续有多少数据，可以直接接收。如果没有这个字段，那么 body 就是不定长的，需要使用 chunked 方式分段传输。</li>
</ul>
<h1 id="标准的请求方法"><a href="#标准的请求方法" class="headerlink" title="标准的请求方法"></a>标准的请求方法</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul>
<li><strong>GET</strong>：获取资源，可以理解为读取或者下载数据；搭配 URI 和其他头字段就能实现对资源更精细的操作。</li>
<li><strong>HEAD</strong>：获取资源的元信息。HEAD 方法与 GET 方法类似，也是请求从服务器获取资源，服务器的处理机制也是一样的，但<strong>服务器不会返回请求的实体数据，只会传回响应头</strong>，也就是资源的“元信息”。HEAD的响应头与 GET 完全相同，所以可以用在很多并不真正需要资源的场合，避免传输 body 数据的浪费。</li>
<li><strong>POST</strong>：向资源提交数据，相当于写入或上传数据；</li>
<li><strong>PUT</strong>：类似 POST；POST 和 PUT 方法则是GET和HEAD的相反操作，向 URI 指定的资源提交数据，数据就放在报文的 body 里。<ul>
<li>通常POST表示“新建”，PUT表示“修改”</li>
</ul>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><strong>DELETE</strong>：方法指示服务器删除资源，因为这个动作危险性太大，所以通常服务器不会执行真正的删除操作，而是对资源做一个删除标记。当然，更多的时候服务器就直接不处理 DELETE 请求。</li>
<li><strong>CONNECT</strong>：是一个比较特殊的方法，要求服务器为客户端和另一台远程服务器建立一条特殊的连接隧道，这时 Web 服务器在中间充当了代理的角色。</li>
<li><strong>OPTIONS</strong>：方法要求服务器列出可对资源实行的操作方法，在响应头的 Allow 字段里返回。它的功能很有限，用处也不大，有的服务器（例如 Nginx）干脆就没有实现对它的支持。</li>
<li><strong>TRACE</strong>：多用于对 HTTP 链路的测试或诊断，可以显示出请求 - 响应的传输路径。它的本意是好的，但存在漏洞，会泄漏网站的信息，所以 Web 服务器通常也是禁止使用。</li>
</ul>
<p>这些方法有点像对文件或数据库的“增删改查”操作，只不过这些动作操作的目标不是本地资源，而是远程服务器上的资源，所以只能由客户端“请求”或者“指示”服务器来完成。</p>
<h2 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h2><p>LOCK 方法锁定资源暂时不允许修改，或者使用 PATCH 方法给资源打个小补丁，部分更新数据。但因为这些方法是非标准的，所以需要为客户端和服务器编写额外的代码才能添加支持。</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/3cdc8ac71b80929f4a94dfeb9ffe4b6d.webp" alt="HTTP请求方法图示"></p>
<p>补充：</p>
<ul>
<li>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。 在现在前端最常用的 cors 跨域中，浏览器都是用 OPTIONS 方法发预检请求的</li>
</ul>
<h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><h2 id="1××"><a href="#1××" class="headerlink" title="1××"></a>1××</h2><p>提示信息，表示目前是协议处理的中间状态，还需要后续的操作；</p>
<ul>
<li><strong>101</strong>：（Switching Protocols）客户端使用 Upgrade 头字段，要求在 HTTP 协议的基础上改成其他的协议继续通信，比如 WebSocket。而如果服务器也同意变更协议，就会发送状态码 101，但这之后的数据传输就不会再使用 HTTP 了。</li>
</ul>
<h2 id="2××"><a href="#2××" class="headerlink" title="2××"></a>2××</h2><p>成功，报文已经收到并被正确处理；</p>
<ul>
<li><strong>200</strong>：（OK）表示一切正常，服务器如客户端所期望的那样返回了处理结果，如果是非 HEAD 请求，通常在响应头后都会有 body 数据。</li>
<li><strong>204</strong>：（No Content）含义与“200 OK”基本相同，但响应头后没有 body 数据。所以对于 Web 服务器来说，正确地区分 200 和 204 是很必要的。</li>
<li><strong>206</strong>：（Partial Content）HTTP 分块下载或断点续传的基础，在客户端发送“范围请求”、要求获取资源的部分数据时出现，它与 200 一样，也是服务器成功处理了请求，但 body 里的数据不是资源的全部，而是其中的一部分；状态码 206 通常还会伴随着头字段“Content-Range”，表示响应报文里 body 数据的具体范围，供客户端确认，例如“Content-Range: bytes 0-99&#x2F;2000”，意思是此次获取的是总计 2000 个字节的前 100 个字节。</li>
</ul>
<h2 id="3××"><a href="#3××" class="headerlink" title="3××"></a>3××</h2><p>重定向，资源位置发生变动，需要客户端重新发送请求；</p>
<ul>
<li><strong>301</strong>：（Moved Permanently）永久重定向”，含义是此次请求的资源已经不存在了，需要改用新的 URI 再次访问。</li>
<li><strong>302</strong>：（Found）“临时重定向”，意思是请求的资源还在，但需要暂时用另一个 URI 来访问。<ul>
<li>301 和 302 都会在响应头里使用字段 Location 指明后续要跳转的 URI，最终的效果很相似，浏览器都会重定向到新的 URI。两者的根本区别在于语义，一个是“永久”，一个是“临时”，所以在场景、用法上差距很大。</li>
<li>301和302还另有两个等价的状态码“308Permanent Redirect”和“307 TemporaryRedirect”，但这两个状态码不允许后续的请求更改请求方法。</li>
</ul>
</li>
<li><strong>304</strong>：（Not Modified）用于 If-Modified-Since 等条件请求，表示资源未修改，用于缓存控制。它不具有通常的跳转含义，但可以理解成“重定向已到缓存的文件”（即“缓存重定向”）。</li>
</ul>
<h2 id="4××"><a href="#4××" class="headerlink" title="4××"></a>4××</h2><p>客户端错误，请求报文有误，服务器无法处理；</p>
<ul>
<li><strong>400</strong>：（Bad Request）表示请求报文有错误，但具体是数据格式错误、缺少请求头还是 URI 超长它没有明确说，只是一个笼统的错误，客户端看到 400 只会是“一头雾水”“不知所措”。所以，在开发 Web 应用时应当尽量避免给客户端返回 400，而是要用其他更有明确含义的状态码。</li>
<li><strong>403</strong>：（Forbidden）实际上不是客户端的请求出错，而是表示服务器禁止访问资源。原因可能多种多样，例如信息敏感、法律禁止等，如果服务器友好一点，可以在 body 里详细说明拒绝请求的原因。</li>
<li><strong>404</strong>：（Not Found）原意是资源在本服务器上未找到，所以无法提供给客户端。但现在已经被“用滥了”，只要服务器“不高兴”就可以给出个 404，而我们也无从得知后面到底是真的未找到，还是有什么别的原因。</li>
<li><strong>405</strong>：（Method Not Allowed）不允许使用某些方法操作资源，例如不允许 POST 只能 GET；</li>
<li><strong>406</strong>：（Not Acceptable）资源无法满足客户端请求的条件，例如请求中文但只有英文；</li>
<li><strong>408</strong>：（Request Timeout）请求超时，服务器等待了过长的时间；</li>
<li><strong>409</strong>：（Conflict）多个请求发生了冲突，可以理解为多线程并发时的竞态；</li>
<li><strong>413</strong>：（Request Entity Too Large）请求报文里的 body 太大；</li>
<li><strong>414</strong>：（Request-URI Too Long）请求行里的 URI 太大；</li>
<li><strong>429</strong>：（Too Many Requests）客户端发送了太多的请求，通常是由于服务器的限连策略；</li>
<li><strong>431</strong>：（Request Header Fields Too Large）请求头某个字段或总体太大；</li>
</ul>
<h2 id="5××"><a href="#5××" class="headerlink" title="5××"></a>5××</h2><p>服务器错误，服务器在处理请求时内部发生了错误。</p>
<ul>
<li><strong>500</strong>：（Internal Server Error）也是一个通用的错误码，服务器究竟发生了什么错误我们是不知道的。不过对于服务器来说这应该算是好事，通常不应该把服务器内部的详细信息，例如出错的函数调用栈告诉外界。虽然不利于调试，但能够防止黑客的窥探或者分析。</li>
<li><strong>501</strong>：（Not Implemented）表示客户端请求的功能还不支持，这个错误码比 500 要“温和”一些，和“即将开业，敬请期待”的意思差不多，不过具体什么时候“开业”就不好说了。</li>
<li><strong>502</strong>：（Bad Gateway）通常是服务器作为网关或者代理时返回的错误码，表示服务器自身工作正常，访问后端服务器时发生了错误，但具体的错误原因也是不知道的。</li>
<li><strong>503</strong>：（Service Unavailable）表示服务器当前很忙，暂时无法响应服务，我们上网时有时候遇到的“网络服务正忙，请稍后重试”的提示信息就是状态码 503。<ul>
<li>503 是一个“临时”的状态，很可能过几秒钟后服务器就不那么忙了，可以继续提供服务，所以 503 响应报文里通常还会有一个“Retry-After”字段，指示客户端可以在多久以后再次尝试发送请求。</li>
</ul>
</li>
</ul>
<h1 id="HTTP协议特点"><a href="#HTTP协议特点" class="headerlink" title="HTTP协议特点"></a>HTTP协议特点</h1><ul>
<li>灵活可扩展</li>
<li>可靠传输</li>
<li>应用层协议</li>
<li>请求 + 应答，客户端主动发起请求，服务器被动回复请求</li>
<li>无状态</li>
<li>其他特点<ul>
<li>实体数据可缓存可压缩</li>
<li>可分段获取数据</li>
<li>支持身份认证</li>
<li>支持国际化语言等等</li>
</ul>
</li>
</ul>
<p>与UDP的对比：<br>UDP：无连接也无状态的，顺序发包乱序收包，数据包发出去后就不管了，收到后也不会顺序整理</p>
<p>TCP：有连接无状态，顺序发包顺序收包，按照收发的顺序管理报文。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
        <category>HTTP</category>
        <category>头字段</category>
        <category>状态码</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（七）</title>
    <url>/2022/07/23/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h1><p>反向代理，它在传输链路中更靠近源服务器，为源服务器提供代理服务。</p>
<ul>
<li><strong>负载均衡</strong><ul>
<li>常用的负载均衡算法：轮询、一致性哈希。这些算法的目标都是尽量把外部的流量合理地分散到多台源服务器，提高系统的整体资源利用率和性能。</li>
</ul>
</li>
<li><strong>健康检查</strong>：使用“心跳”等机制监控后端服务器，发现有故障就及时“踢出”集群，保证服务高可用；</li>
<li><strong>安全防护</strong>：保护被代理的后端服务器，限制 IP 地址或流量，抵御网络攻击和过载；</li>
<li><strong>加密卸载</strong>：对外网使用 SSL&#x2F;TLS 加密通信认证，而在安全的内网不加密，消除加解密成本；</li>
<li><strong>数据过滤</strong>：拦截上下行的数据，任意指定策略修改请求或者响应；</li>
<li><strong>内容缓存</strong>：暂存、复用服务器响应。</li>
</ul>
<p>但是，代理作为客户端和源服务器的中间人，在数据上下行的时候可以添加或删除部分头字段，也可以使用黑白名单过滤 body 里的关键字，甚至直接发送虚假的请求、响应，而浏览器和源服务器都没有办法判断报文的真伪。</p>
<h2 id="相关头字段"><a href="#相关头字段" class="headerlink" title="相关头字段"></a>相关头字段</h2><p>代理可作为客户端访问服务器，也可作为服务器响应客户端；同时，能够修改请求或者响应，可能会隐藏客户端或者服务端的真实信息，如果想要获得真实信息，可用到<code>Via</code>字段</p>
<ul>
<li><strong>Via</strong>：（通用字段）每当报文经过一个代理节点，代理服务器就会把自身的信息追加到字段的末尾</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/52a3bd760584972011f6be1a5258e2d7.webp" alt="Via字段图示"></p>
<p>Via 字段只解决了客户端和源服务器判断是否存在代理的问题，还不能知道对方的真实信息。</p>
<p>但服务器的 IP 地址应该是保密的，关系到企业的内网安全，所以一般不会让客户端知道。</p>
<p>不过反过来，通常服务器需要知道客户端的真实 IP 地址，方便做访问控制、用户画像、统计分析。</p>
<p>HTTP 标准里并没有为此定义头字段，但已经出现了很多“事实上的标准”，最常用的两个头字段是“<code>X-Forwarded-For</code>”和“<code>X-Real-IP</code>”。</p>
<ul>
<li><strong>X-Forwarded-For</strong>：形式上和“Via”差不多，也是每经过一个代理节点就会在字段里追加一个信息。但“Via”追加的是代理主机名（或者域名），而“<strong>X-Forwarded-For”追加的是请求方的 IP 地址</strong>。<strong>所以，在字段里最左边的 IP 地址就是客户端的地址。</strong></li>
<li><strong>X-Real-IP</strong>：是另一种获取客户端真实 IP 的手段，它的作用很简单，就是记录客户端 IP 地址，没有中间的代理信息，相当于是“X-Forwarded-For”的简化版。如果客户端和源服务器之间只有一个代理，那么这两个字段的值就是相同的。</li>
<li><strong>X-Forwarded-Host</strong>：只记录客户端的信息，客户端请求的原始域名</li>
<li><strong>X-Forwarded-Proto</strong>”，只记录客户端的信息，客户端请求的原始协议名。</li>
</ul>
<h2 id="代理协议"><a href="#代理协议" class="headerlink" title="代理协议"></a>代理协议</h2><p>以上字段遇到的问题：</p>
<ul>
<li>通过“X-Forwarded-For”操作代理信息必须要解析 HTTP 报文头，这对于代理来说成本比较高，原本只需要简单地转发消息就好，而现在却必须要费力解析数据再修改数据，会降低代理的转发性能。</li>
<li>另一个问题是“X-Forwarded-For”等头必须要修改原始报文，而有些情况下是不允许甚至不可能的（比如使用 HTTPS 通信被加密）。</li>
</ul>
<p>“代理协议”有 v1 和 v2 两个版本，v1 和 HTTP 差不多，也是明文，而 v2 是二进制格式。v1它在 HTTP 报文前增加了一行 ASCII 码文本，相当于又多了一个头。</p>
<p>这一行文本其实非常简单，开头必须是“PROXY”五个大写字母，然后是“TCP4”或者“TCP6”，表示客户端的 IP 地址类型，再后面是请求方地址、应答方地址、请求方端口号、应答方端口号，最后用一个回车换行（\r\n）结束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">PROXY</span> <span class="title class_">TCP4</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span> <span class="number">55555</span> <span class="number">80</span>\r\n</span><br><span class="line"><span class="variable constant_">GET</span> / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="title class_">Host</span>: www.<span class="property">xxx</span>.<span class="property">com</span>\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure>

<p>在 GET 请求行前多出了 PROXY 信息行，客户端的真实 IP 地址是“1.1.1.1”，端口号是 55555。</p>
<p>服务器看到这样的报文，只要解析第一行就可以拿到客户端地址，不需要再去理会后面的 HTTP 数据，省了很多事情。</p>
<p>这样，可以在不改动原始报文的情况下传递客户端的真实 IP。</p>
<p>不过代理协议并不支持“X-Forwarded-For”的链式地址形式，所以拿到客户端地址后再如何处理就需要代理服务器与后端自行约定。</p>
<p>知识补充：</p>
<ul>
<li>“Via”是HTTP协议里规定的标准头字段，但有的服务器返回的响应报文里会使用“X-Via”,含义是相同的。</li>
<li>因为HTTP是明文传输，请求头很容易被窜改,所以“X-Forwarded-For”也不是完全可信的。</li>
</ul>
<h1 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h1><p>代理服务收到源服务器发来的响应数据后需要做两件事。</p>
<ol>
<li>把报文转发给客户端；</li>
<li>把报文存入自己的 Cache 里。</li>
</ol>
<p>再有相同的请求，代理服务器就可以直接发送 304 或者缓存数据，不必再从源服务器那里获取。这样就降低了客户端的等待时间，同时节约了源服务器的网络带宽。</p>
<p>缓存代理既可以作为客户端向源服务器发送网络请求，也可以作为服务器响应客户端的请求。（既是客户端又是服务器，所以<strong>既可以用客户端的缓存控制策略也可以用服务器端的缓存控制策略，（即：各种Cache-Control头字段）</strong>）</p>
<h2 id="源服务器的缓存控制"><a href="#源服务器的缓存控制" class="headerlink" title="源服务器的缓存控制"></a>源服务器的缓存控制</h2><p>客户端也有缓存，但是与代理缓存不同的地方在于，客户端的缓存仅仅是客户端自身使用，但是代理的缓存会为很多的客户端提供服务。</p>
<p>头字段</p>
<ul>
<li><strong>Cache-Control</strong>：（通用字段）<ul>
<li>属性</li>
<li><code>public</code>&amp;&amp; <code>private</code>：区分代理缓存和客户端缓存。<strong>默认public</strong><ul>
<li>public：缓存完全开放，谁都可以存，谁都可以用。</li>
<li>private：缓存只能在客户端保存，是用户“私有”的，不能放在代理上与别人共享</li>
</ul>
</li>
<li><code>proxy-revalidate</code>：<ul>
<li>区分：must-revalidate：只要过期就必须回源服务器验证；</li>
<li><code>proxy-revalidate</code>要求代理的缓存过期后必须验证，客户端不必回源，只验证到代理这个环节就行了</li>
</ul>
</li>
<li><code>s-maxage</code>：代理缓存的生命周期。只限定在代理上能够存多久，而客户端仍然使用“<code>max-age</code>”。<ul>
<li>若响应报文同时指定了<code>s-maxage</code>和<code>max-age</code>，则缓存代理参考<code>s-maxage</code>，客户端参考<code>max-age</code></li>
<li>若相应报文只指定了<code>max-age</code>，缓存代理和客户端均参考<code>max-age</code></li>
</ul>
</li>
<li><code>no-transform</code>：代理专用属性。。代理有时候会对缓存下来的数据做一些优化，比如把图片生成 png、webp 等几种格式，方便今后的请求处理，而“no-transform”就会禁止这样做，不许“偷偷摸摸搞小动作”。</li>
<li><code>max-age</code>、<code>no-store</code>、<code>no-cache</code> 它们也是同样作用于代理和源服务器。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private, max-age=<span class="number">5</span></span><br><span class="line"><span class="comment">// 表示该响应报文只能存放在客户端，时间为5s</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public, max-age=<span class="number">5</span>, s-maxage=<span class="number">10</span></span><br><span class="line"><span class="comment">// 代理可以缓存该响应报文，缓存时间为10秒，客户端也可以缓存响应报文，缓存时间为5秒，但是5秒过期了需要重新去缓存代理重新请求。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">max-age=<span class="number">30</span>, proxy-revalidate, no-transform</span><br><span class="line"><span class="comment">// 缓存代理和客户端均能缓存响应报文，因为没有s-maxage，则缓存代理和客户端均能缓存30s</span></span><br><span class="line"><span class="comment">// 代理的缓存过期了要去源服务器验证，不能对缓存数据做优化</span></span><br></pre></td></tr></table></figure>

<img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/09266657fa61d0d1a720ae3360fe9535.webp" alt="整的服务器端缓存控制策略，可以同时控制客户端和代理" style="zoom:50%;" />



<p>注意：源服务器在设置完“Cache-Control”后必须要为报文加上“Last-modified”或“ETag”字段。否则，客户端和代理后面就无法使用条件请求来验证缓存是否有效，也就不会有 304 缓存重定向。</p>
<h1 id="客户端缓存控制"><a href="#客户端缓存控制" class="headerlink" title="客户端缓存控制"></a>客户端缓存控制</h1><p>相关头字段</p>
<ul>
<li><code>Cache-Control</code>：<ul>
<li>属性：</li>
<li><code>max-stale</code>：如果代理上的缓存过期了也可以接受，但不能过期太多，超过 x 秒也会不要</li>
<li><code>min-fresh</code>：缓存必须有效，而且必须在 <strong>x 秒后依然有效</strong>。</li>
<li><code>only-if-cached</code>：表示只接受代理缓存的数据，不接受源服务器的响应；如果代理上没有缓存或者缓存过期，就应该给客户端返回一个 504（Gateway Timeout）。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">max-age=<span class="number">5</span>, max-stale=<span class="number">2</span></span><br><span class="line"><span class="comment">// 资源可以缓存5s，过期2s也可以接收</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">max-age=<span class="number">10</span>, min-fresh=<span class="number">5</span></span><br><span class="line"><span class="comment">// 资源可以缓存10s,如果当前资源缓存了6s,6+5 = 11 &gt; 10，则缓存资源不能使用</span></span><br></pre></td></tr></table></figure>



<img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/09266657fa61d0d1a720ae3360fe9535.webp" alt="客户端缓存控制" style="zoom:50%;" />

<p>代理在响应报文里还会额外加了“<code>X-Cache</code>”“<code>X-Hit</code>”等自定义头字段，表示缓存是否命中和命中率，方便观察缓存代理的工作情况。</p>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><ul>
<li><strong>Vary</strong>：Vary是客户端与服务端在使用Accept和Content-Type等字段进行响应报文具体内容协商时，由服务端在响应头添加的字段，用来记录服务器在与客户端进行内容协商时参考的请求字段。<ul>
<li>这个 Vary 字段表示服务器依据了 Accept-Encoding、User-Agent 和 Accept 这三个头字段，然后决定了发回的响应报文，具体步骤见下：</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.客户端1请求数据A</span></span><br><span class="line"><span class="title class_">Accept</span>: application/json</span><br><span class="line"><span class="title class_">Uset</span>-<span class="title class_">Agent</span>: <span class="title class_">Chrome</span>/<span class="number">103.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Encoding</span>: gzip</span><br><span class="line">...其他请求头字段</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.请求来到代理服务器，发现没有数据A的相关缓存</span></span><br><span class="line"><span class="comment">// 将请求发送给源服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务端响应，将资源发送给缓存代理</span></span><br><span class="line"><span class="title class_">Vary</span>: <span class="title class_">Accept</span>-<span class="title class_">Encoding</span>,<span class="title class_">User</span>-<span class="title class_">Agent</span>,<span class="title class_">Accept</span></span><br><span class="line"><span class="comment">// ...其他响应体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.代理服务器发现Vary字段，取出Vary字段，</span></span><br><span class="line"><span class="comment">// 进行一系列的处理，将数据A与Vary的所有值做一个映射，见下</span></span><br><span class="line"><span class="variable constant_">URL</span> + 请求方法 + （<span class="title class_">Accept</span>: application/json <span class="title class_">Uset</span>-<span class="title class_">Agent</span>: <span class="title class_">Chrome</span>/<span class="number">103.0</span><span class="number">.0</span><span class="number">.0</span> <span class="title class_">Accept</span>-<span class="title class_">Encoding</span>: gzip）==&gt; 对应数据A</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.客户端2同样请求数据A，向代理服务器发送了和客户端1同样的请求头字段（即Accept、User-Agent、Accept-Encoding均相同），请求的方法以及url和客户端1相同，缓存代理会在本地进行映射关系的匹配，</span></span><br><span class="line"><span class="comment">// 发现资源匹配后且缓存未过期，将数据A返回给客户端2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.其他客户端请求数据B,缓存代理发现本地没有，进行与客户端1同样的步骤</span></span><br></pre></td></tr></table></figure>

<p>如果不使用Vary字段，单靠请求URL和请求方法，其他的客户端可能会拿到错误的数据。</p>
<p>这便是 Vary 头字段的作用：让代理服务器的缓存命中更多的决定因子，而不仅仅是依据请求 URL 和请求方法来决定是否命中。</p>
<p>参考文档：<a href="https://juejin.cn/post/6844903981907443720">https://juejin.cn/post/6844903981907443720</a> </p>
<ul>
<li><strong>Purge</strong>：缓存清理”，它对于代理也是非常重要的功能<ul>
<li>过期的数据应该及时淘汰，避免占用空间；</li>
<li>源站的资源有更新，需要删除旧版本，主动换成最新版（即刷新）；</li>
<li>有时候会缓存了一些本不该存储的信息，例如网络谣言或者危险链接，必须尽快把它们删除。</li>
</ul>
</li>
</ul>
<p>清理缓存的方法有很多，比较常用的一种做法是使用自定义请求方法“PURGE”，发给代理服务器，要求删除 URI 对应的缓存数据。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
        <category>HTTP</category>
        <category>缓存代理</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTP代理服务</tag>
        <tag>HTTP缓存代理</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（三）</title>
    <url>/2022/07/22/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>此篇笔记主要为HTTP传输大文件的方法</p>
<h1 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h1><ul>
<li><strong>Accept-Ecoding</strong>：（请求字段）浏览器可接受的压缩格式。</li>
<li><strong>Content-Encoding</strong>：（通用字段）通常为服务端采用的压缩格式。</li>
</ul>
<p>缺点：</p>
<p>gzip 等压缩算法通常只对文本文件有较好的压缩率，而图片、音频视频等多媒体数据本身就已经是高度压缩的，再用 gzip 处理也不会变小（甚至还有可能会增大一点），所以它就失效了。</p>
<p>不过数据压缩在处理文本的时候效果还是很好的，所以各大网站的服务器都会使用这个手段作为“保底”。例如，在 Nginx 里就会使用“gzip on”指令，启用对“text&#x2F;html”的压缩。</p>
<h1 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h1><p>如果大文件整体不能变小，那就把它“拆开”，分解成多个小块，把这些小块分批发给浏览器，浏览器收到后再组装复原。</p>
<p>这样浏览器和服务器都不用在内存里保存文件的全部，每次只收发一小部分，网络也不会被大文件长时间占用，内存、带宽等资源也就节省下来了。</p>
<ul>
<li><strong>Transfer-Encoding</strong>: （响应头字段）可取值为<strong>chunked</strong>，表示报文里的 body 部分不是一次性发过来的，而是分成了许多的块（chunk）逐个发送。<ul>
<li>分块传输也可以用于“流式数据”，例如由数据库动态生成的表单页面，这种情况下 body 数据的长度是未知的，无法在头字段“Content-Length”里给出确切的长度，所以也只能用 chunked 方式分块发送。</li>
<li><strong>“Transfer-Encoding: chunked”和“Content-Length”这两个字段是互斥的</strong>，也就是说响应报文里这两个字段不能同时出现，一个响应报文的传输要么是长度已知，要么是长度未知（chunked）</li>
</ul>
</li>
</ul>
<p>注意：分块传输可以流式收发数据，节约内存和带宽，使用响应头字段“Transfer-Encoding: chunked”来表示，<strong>分块的格式是 16 进制长度头 + 数据块；</strong></p>
<img alt='分块格式' src="https://hrmtest.oss-cn-beijing.aliyuncs.com/25e7b09cf8cb4eaebba42b4598192410.webp" style="zoom:20%;" />

<p>说明：</p>
<p>每个分块包含两个部分，长度头和数据块；</p>
<p>长度头是以 CRLF（回车换行，即\r\n）结尾的一行明文，用 16 进制数字表示长度；</p>
<p>数据块紧跟在长度头后，最后也用 CRLF 结尾，但数据不包含 CRLF；</p>
<p>最后用一个长度为 0 的块表示结束，即“0\r\n\r\n”。</p>
<h1 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h1><p>应用场景：观看电视剧跳过片头片尾、快进、拖动进度条等。</p>
<ul>
<li><strong>Accept-Ranges</strong>：（响应字段）<strong>取值为bytes，由服务器告诉浏览器，服务器支持范围请求。</strong><ul>
<li>如果不支持范围请求，可以不添加该字段或者取值为<strong>none</strong>。</li>
</ul>
</li>
<li><strong>Range</strong>：（请求字段）格式：”bytes&#x3D;x-y“，其中，xy表示范围。x、y 表示的是“偏移量”，范围必须从 0 计数，例如前 10 个字节表示为“0-9”，第二个 10 字节表示为“10-19”，而“0-10”实际上是前 11 个字节。<ul>
<li>Range 的格式也很灵活，起点 x 和终点 y 可以省略，能够很方便地表示正数或者倒数的范围。假设文件是 100 个字节，那么：</li>
<li>“0-”表示从文档起点到文档终点，相当于“0-99”，即整个文件；</li>
<li>“10-”是从第 10 个字节开始到文档末尾，相当于“10-99”；</li>
<li>“-1”是文档的最后一个字节，相当于“99-99”；</li>
<li>“-10”是从文档末尾倒数 10 个字节，相当于“90-99”。</li>
</ul>
</li>
</ul>
<p>服务器收到 Range 字段后，需要做四件事：</p>
<ol>
<li>第一，它必须检查范围是否合法，比如文件只有 100 个字节，但请求“200-300”，这就是范围越界了。服务器就会返回状态码 416，意思是“你的范围请求有误，我无法处理，请再检查一下”。</li>
<li>第二，如果范围正确，服务器就可以根据 Range 头计算偏移量，读取文件的片段了，返回状态码“206 Partial Content”，和 200 的意思差不多，但表示 body 只是原数据的一部分。</li>
<li>第三，服务器要添加一个响应头字段 <strong>Content-Range</strong>，告诉片段的实际偏移量和资源的总大小，格式是“<strong>bytes x-y&#x2F;length</strong>”，与 Range 头区别在没有“&#x3D;”，范围后多了总长度。例如，对于“0-10”的范围请求，值就是“bytes 0-10&#x2F;100”。</li>
<li>最后剩下的就是发送数据了，直接把片段用 TCP 发给客户端，一个范围请求就算是处理完了。</li>
</ol>
<ul>
<li><strong>Content-Range</strong>：（响应字段）由服务器告知客户端资源的偏移量和总大小。格式是“<strong>bytes x-y&#x2F;length</strong>”</li>
</ul>
<p>不仅看视频的拖拽进度需要范围请求，常用的下载工具里的多段下载、断点续传也是基于它实现的，要点是：</p>
<p>先发个HEAD，看服务器是否支持范围请求，同时获取文件的大小；</p>
<p>开 N 个线程，每个线程使用 Range 字段划分出各自负责下载的片段，发请求传输数据；</p>
<p>下载意外中断也不怕，不必重头再来一遍，只要根据上次的下载记录，用 Range 请求剩下的那一部分就可以了。</p>
<p><strong>注意：</strong></p>
<p>范围请求可以只获取部分数据，即“分块请求”，实现视频拖拽或者断点续传，使用请求头字段“Range”和响应头字段“Content-Range”，响<strong>应状态码必须是 206</strong></p>
<h1 id="多段数据"><a href="#多段数据" class="headerlink" title="多段数据"></a>多段数据</h1><p>范围请求一次只获取一个片段，其实它还支持在 Range 头里使用多个“x-y”，一次性获取多个片段数据。</p>
<p><strong>这种情况需要使用一种特殊的 MIME 类型（响应字段）：“Content-Type: multipart&#x2F;byteranges”，表示报文的 body 是由多段字节序列组成的</strong></p>
<p><strong>并且还要用一个参数“boundary&#x3D;xxx”给出段之间的分隔标记。</strong></p>
<p>例如：请求范围在0-9和20-29的数据</p>
<p>客户端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /testUrl <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: xxxxxx</span><br><span class="line"><span class="title class_">Range</span>: bytes=<span class="number">0</span>-<span class="number">9</span>, <span class="number">20</span>-<span class="number">29</span></span><br></pre></td></tr></table></figure>

<p>服务端返回（部分响应头）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: multipart/byteranges; boundary=<span class="number">00000000001</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">189</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Ranges</span>: bytes</span><br></pre></td></tr></table></figure>

<img  alt='分段请求格式' src="https://hrmtest.oss-cn-beijing.aliyuncs.com/fffa3a65e367c496428f3c0c4dac8a37.webp" style="zoom: 25%;" />

<p>每一个分段必须以“- -boundary”开始（前面加两个“-”）</p>
<p>之后要用“Content-Type”和“Content-Range”标记这段数据的类型和所在范围，然后就像普通的响应头一样以回车换行结束，再加上分段数据</p>
<p>最后用一个“- -boundary- -”（前后各有两个“-”）表示所有的分段结束。</p>
<p><strong>这四种方法不是互斥的，而是可以混合起来使用，例如压缩后再分块传输，或者分段后再分块</strong></p>
<h1 id="其他知识补充"><a href="#其他知识补充" class="headerlink" title="其他知识补充"></a>其他知识补充</h1><ul>
<li>gzip的压缩率通常能够超过60%，而br算法是专为HTML设计的，压缩效率和性能比 gzip还要好，能够再提高20%的压缩密度。<ul>
<li>gzip 等压缩算法通常只对文本文件有较好的压缩率，而图片、音频视频等多媒体数据本身就已经是高度压缩的，再用 gzip 处理也不会变小</li>
</ul>
</li>
<li>Nginx的“gzip on”指令很智能，只会压缩文本数据，不会压缩图片、音频、视频。</li>
<li>Transfer-Encoding字段最常见的值是chunked，但也可以用gzip、deflate 等，表示传输时使用了压缩编码。<ul>
<li>注意这与Content -Encoding不同,Transfer - Encoding在传输后会被自动解码还原出原始数据，而Content- Encoding 则必须由应用自行解码。</li>
</ul>
</li>
<li>与范围请求有关的头字段还有If-Range（条件范围请求）。</li>
<li>分块传输数据的时候，如果数据里含有回车换行（\r\n）是否会影响分块的处理呢？<ul>
<li>不会，因为分块前有数据长度说明。</li>
<li>http交给tcp进行传输的时候本来就会分块，那http分块的不同在于：在http层是看不到tcp的，它不知道下层协议是否会分块，下层是否分块对它来说没有意义，不关心。 在http里一个报文必须是完整交付，在处理大文件的时候就很不方便，所以就要分块，在http层面方便处理。 chunked主要是在http的层次来解决问题</li>
</ul>
</li>
<li>如果对一个被 gzip 的文件执行范围请求，比如“Range: bytes&#x3D;10-19”，那么这个范围是应用于原文件还是压缩后的文件呢？<ul>
<li>如果原来的文件属于gzip，那么请求范围就是gzip原文件。（此时gzip文件就是原文件）</li>
<li>如果是其他文件，但是被gzip压缩了，那么range的请求范围就是原文件。</li>
<li><strong>总之，range是针对原文件的。</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTP的传输大文件的方法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（五）</title>
    <url>/2022/07/23/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="重定向的过程"><a href="#重定向的过程" class="headerlink" title="重定向的过程"></a>重定向的过程</h1><h2 id="相关字段"><a href="#相关字段" class="headerlink" title="相关字段"></a>相关字段</h2><ul>
<li><strong>Location</strong>：（响应字段）取值为其他的路由地址。<strong>只有配合 301&#x2F;302 状态码才有意</strong>义，它标记了服务器要求重定向的 URI。浏览器收到 301&#x2F;302 报文，会检查响应头里有没有“Location”。如果有，就从字段值里提取出 URI，发出新的 HTTP 请求，相当于自动替我们点击了这个链接。<ul>
<li>取值可以是相对或者绝对路径。<ul>
<li>相对url浏览器可自动拼接</li>
<li>绝对url必须完整，包括协议、域名、端口、路径等</li>
</ul>
</li>
<li>重定向可以把一个 URI 指向另一个 URI，也可以把多个 URI 指向同一个 URI，用途很多；</li>
</ul>
</li>
<li><strong>Refresh</strong>：（响应字段）实现延时重定向,例如“Refresh: 5; url&#x3D;xxx”告诉浏览器5秒钟后再跳转。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Refresh</span>: <span class="number">1</span>,url=/index</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (&#123; request, response &#125;, next) =&gt; &#123;</span><br><span class="line">  response.<span class="property">status</span> = <span class="number">301</span>;</span><br><span class="line">  response.<span class="title function_">set</span>(<span class="string">&quot;Refresh&quot;</span>, <span class="string">&#x27;5,url=/index&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> (&#123; request, response &#125;, next) =&gt; &#123;</span><br><span class="line">  response.<span class="property">body</span> = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>

<h2 id="相关状态码"><a href="#相关状态码" class="headerlink" title="相关状态码"></a>相关状态码</h2><ul>
<li><strong>301</strong>：（Moved Permanently）“永久重定向”，意思是原 URI 已经“永久”性地不存在了，今后的所有请求都必须改用新的 URI。<ul>
<li>浏览器遇见301，会做适当的优化。比如历史记录、更新书签，下次可能就会直接用新的 URI 访问，省去了再次跳转的成本。搜索引擎的爬虫看到 301，也会更新索引库，不再使用老的 URI。</li>
</ul>
</li>
<li><strong>302</strong>：（“Moved Temporarily”）“临时重定向”，原 URI 处于“临时维护”状态，新的 URI 是起“顶包”作用的“临时工”。<ul>
<li>浏览器或者爬虫看到 302，会认为原来的 URI 仍然有效，但暂时不可用，所以只会执行简单的跳转页面，不记录新的 URI，也不会有其他的多余动作，下次访问还是用原 URI。</li>
</ul>
</li>
<li><strong>303</strong>：（See Other）类似 302，但要求重定向后的请求改为 GET 方法，访问一个结果页面，避免 POST&#x2F;PUT 重复操作；</li>
<li><strong>307</strong>：（Temporary Redirect）类似 302，但重定向后请求里的方法和实体不允许变动，含义比 302 更明确；</li>
<li><strong>308</strong>：（Permanent Redirect）类似 307，不允许重定向后的请求变动，但它是 301“永久重定向”的含义。<ul>
<li>303，307，308这三个状态码的接受程度较低，有的浏览器和服务器可能不支持，开发时应当慎重，测试确认浏览器的实际效果后才能使用。</li>
</ul>
</li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>当前资源不可用，需要另一个URL来代替。<ul>
<li>域名变更</li>
<li>服务器变更</li>
<li>网站改版</li>
<li>系统维护</li>
<li>这些都会导致原 URI 指向的资源无法访问，为了避免出现 404，就需要用重定向跳转到新的 URI，继续为网民提供服务。</li>
</ul>
</li>
<li>避免重复<ul>
<li>让多个网址都跳转到一个 URI，增加访问入口的同时还不会增加额外的工作量。</li>
<li>有的网站都会申请多个名称类似的域名，然后把它们再重定向到主站上。</li>
</ul>
</li>
</ul>
<h1 id="301和302的选择"><a href="#301和302的选择" class="headerlink" title="301和302的选择"></a>301和302的选择</h1><h2 id="永久"><a href="#永久" class="headerlink" title="永久"></a>永久</h2><p>301</p>
<p>如果域名、服务器、网站架构发生了大幅度的改变，比如启用了新域名、服务器切换到了新机房、网站目录层次重构，这些都算是“永久性”的改变。原来的 URI 已经不能用了，必须用 301“永久重定向”，通知浏览器和搜索引擎更新到新地址，这也是搜索引擎优化（SEO）要考虑的因素之一。</p>
<h2 id="临时"><a href="#临时" class="headerlink" title="临时"></a>临时</h2><p>302</p>
<p>原来的 URI 在将来的某个时间点还会恢复正常，</p>
<ul>
<li>常见的应用场景就是系统维护，把网站重定向到一个通知页面，告诉用户过一会儿再来访问。</li>
<li>另一种用法就是“<strong>服务降级</strong>”，比如在双十一促销的时候，把订单查询、领积分等不重要的功能入口暂时关闭，保证核心服务能够正常运行</li>
</ul>
<h1 id="重定向的相关问题"><a href="#重定向的相关问题" class="headerlink" title="重定向的相关问题"></a>重定向的相关问题</h1><h2 id="性能损耗"><a href="#性能损耗" class="headerlink" title="性能损耗"></a>性能损耗</h2><p>很明显，重定向的机制决定了一个跳转会有两次请求 - 应答，比正常的访问多了一次。</p>
<p>虽然 301&#x2F;302 报文很小，但大量的跳转对服务器的影响也是不可忽视的。站内重定向还好说，可以长连接复用，站外重定向就要开两个连接，如果网络连接质量差，那成本可就高多了，会严重影响用户的体验。</p>
<p>所以重定向应当适度使用，决不能滥用。</p>
<h2 id="循环跳转"><a href="#循环跳转" class="headerlink" title="循环跳转"></a>循环跳转</h2><p>如果重定向的策略设置欠考虑，可能会出现“A&#x3D;&gt;B&#x3D;&gt;C&#x3D;&gt;A”的无限循环，不停地在这个链路里转圈圈</p>
<p>所以 HTTP 协议特别规定，浏览器必须具有检测“循环跳转”的能力，在发现这种情况时应当停止发送请求并给出错误提示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (&#123; request, response &#125;, next) =&gt; &#123;</span><br><span class="line">  response.<span class="property">status</span> = <span class="number">301</span>;</span><br><span class="line">  response.<span class="title function_">set</span>(<span class="string">&quot;Location&quot;</span>, <span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> (&#123; request, response &#125;, next) =&gt; &#123;</span><br><span class="line">  response.<span class="property">status</span> = <span class="number">301</span>;</span><br><span class="line">  response.<span class="title function_">set</span>(<span class="string">&quot;Location&quot;</span>, <span class="string">&#x27;/string&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/string&#x27;</span>, <span class="keyword">async</span> (&#123; request, response &#125;, next) =&gt; &#123;</span><br><span class="line">  response.<span class="property">status</span> = <span class="number">301</span>;</span><br><span class="line">  response.<span class="title function_">set</span>(<span class="string">&quot;Location&quot;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220723133314383.png" alt="循环重定向"></p>
<h1 id="其他知识补充"><a href="#其他知识补充" class="headerlink" title="其他知识补充"></a>其他知识补充</h1><ul>
<li>网页的入链接和出链接<ul>
<li>入链接：可理解为导航网站跳转到本站。、<ul>
<li>入站链接很重要，因为它们通常被认为是对网站爬虫的最大指示，表明你的网站在某个主题上是一个权威。来自高质量、高权威网站的内向链接越多，你的网站的排名就越能排在Google搜索结果页面（SERP）的前面。</li>
</ul>
</li>
<li>出链接：从本找跳转到其他网站。（网站的出站链接是其他网站的入站链接）</li>
</ul>
</li>
<li>“300 Multiple Choices”也是一个特殊的重定向状态码，它会返回一个有多个链接选项的页面，由用户自行选择要跳转的链接，用的较少。</li>
<li>与跳转有关的还有一个“Referer”和“Referrer-Policy”（注意前者是个拼写错误,但已经“将错就错”)，表示浏览器跳转的来源(即引用地址)，可用于统计分析和防盗链。</li>
<li><strong>301&#x2F;302重定向是由浏览器执行的</strong>，对于服务器来说可以称为“外部重定向”，相应的也就有服务器的“内部重定向”，直接在服务器内部跳转URI，将重定向的资源返回给客户端，因为不会发出HTTP请求，所以没有额外的性能损失。</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
        <category>HTTP</category>
        <category>重定向</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTP的重定向和跳转</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（二）</title>
    <url>/2022/07/22/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="HTTP的数据类型与编码"><a href="#HTTP的数据类型与编码" class="headerlink" title="HTTP的数据类型与编码"></a>HTTP的数据类型与编码</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>电子邮件可以发送 ASCII 码以外的任意数据，方案的名字叫做“多用途互联网邮件扩展”（Multipurpose Internet Mail Extensions），简称为 <strong>MIME</strong>。</p>
<p>HTTP “顺手牵羊”取了其中的一部分，用来标记 body 的数据类型，这就是我们平常总能听到的“MIME type”。</p>
<p>MIME 把数据分成了八大类，每个大类下再细分出多个子类，形式是<strong>“type&#x2F;subtype”</strong>的字符串</p>
<p>这里简单列举一下在 HTTP 里<strong>经常遇到的几个类别</strong>：</p>
<ul>
<li><strong>text</strong>：即文本格式的可读数据，我们最熟悉的应该就是 text&#x2F;html 了，表示超文本文档，此外还有纯文本 text&#x2F;plain、样式表 text&#x2F;css 等。</li>
<li><strong>image</strong>：即图像文件，有 image&#x2F;gif、image&#x2F;jpeg、image&#x2F;png 等。</li>
<li><strong>audio&#x2F;video</strong>：音频和视频数据，例如 audio&#x2F;mpeg、video&#x2F;mp4 等。</li>
<li><strong>application</strong>：数据格式不固定，可能是文本也可能是二进制，必须由上层应用程序来解释。常见的有 application&#x2F;json，application&#x2F;javascript、application&#x2F;pdf 等，另外，如果实在是不知道数据是什么类型，像刚才说的“黑盒”，就会是 application&#x2F;octet-stream，即不透明的二进制数据。</li>
</ul>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>MIME type 还不够，因为 HTTP 在传输时为了节约带宽，有时候还会压缩数据，为了不要让浏览器继续“猜”，还需要有一个“Encoding type”，告诉数据是用的什么编码格式，这样对方才能正确解压缩，还原出原始的数据。</p>
<p>Encoding type 就少了很多，常用的只有下面三种：</p>
<ul>
<li><strong>gzip</strong>：GNU zip 压缩格式，也是互联网上最流行的压缩格式；</li>
<li><strong>deflate</strong>：zlib（deflate）压缩格式，流行程度仅次于 gzip；</li>
<li><strong>br</strong>：一种专门为 HTTP 优化的新压缩算法（Brotli）。</li>
</ul>
<h2 id="数据类型使用的头字段"><a href="#数据类型使用的头字段" class="headerlink" title="数据类型使用的头字段"></a>数据类型使用的头字段</h2><p>客户端用 Accept 头告诉服务器希望接收什么样的数据，而服务器用 Content 头告诉客户端实际发送了什么样的数据。</p>
<ul>
<li><strong>Accept</strong>：<strong>Accept（请求字段） 字段标记的是客户端可理解的 MIME type</strong>，可以用“,”做分隔符列出多个类型，让服务器有更多的选择余地。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Accept</span>: text/html,application/xml,image/webp,image/png</span><br></pre></td></tr></table></figure>

<p>这就是告诉服务器：“我能够看懂 HTML、XML 的文本，还有 webp 和 png 的图片，请给我这四类格式的数据”。</p>
<ul>
<li><p><strong>Accept-Encoding</strong>：（请求字段）字段标记的是客户端支持的压缩格式，例如上面说的 gzip、deflate 等，同样也可以用“,”列出多个，服务器可以选择其中一种来压缩数据，实际使用的压缩格式放在响应头字段 Content-Encoding 里。</p>
</li>
<li><p><strong>Content-Type</strong>：（通用字段）服务器会在响应报文里用头字段 Content-Type 告诉实体数据的真实类型</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/png</span><br></pre></td></tr></table></figure>

<p>这样浏览器看到报文里的类型是“text&#x2F;html”就知道是 HTML 文件，会调用排版引擎渲染出页面，看到“image&#x2F;png”就知道是一个 PNG 文件，就会在页面上显示出图像。</p>
<p>*<em>content-<em>（通用字段）字段也可以用在请求报文里，说明请求体的数据类型。</em></em></p>
<ul>
<li><strong>Content-Encoding</strong>：（通用字段）服务器使用的压缩格式。<ul>
<li><strong>Content-Encoding（通用字段）</strong>和<strong>Accept-Encoding</strong>（请求字段）是可以省略的，如果请求报文里没有 Accept-Encoding 字段，就表示客户端不支持压缩数据；如果响应报文里没有 Content-Encoding 字段，就表示响应数据没有被压缩。</li>
</ul>
</li>
</ul>
<h2 id="语言类型与编码"><a href="#语言类型与编码" class="headerlink" title="语言类型与编码"></a>语言类型与编码</h2><ul>
<li><strong>Accept-Language</strong>：（请求字段）标记了客户端可理解的自然语言，也允许用“,”做分隔符列出多个类型</li>
</ul>
<p>语言类型的子类型，与MIME TYPE不同，使用”-“作为分隔符，而MIME类型是”Type&#x2F;subType”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: zh-<span class="variable constant_">CN</span>, zh, en</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Content-Language</strong>：（通用字段）服务器告诉客户端实体数据使用的实际语言类型，或者客户端告诉服务器body语言类型。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Language</span>: zh-<span class="variable constant_">CN</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Accept-Charset</strong>：浏览器可接受的字符集。</li>
</ul>
<p><strong>响应头里却没有对应的 Content-Charset，而是在 Content-Type 字段的数据类型后面用“charset&#x3D;xxx”来表示，这点需要特别注意。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Charset</span>: gbk, utf-<span class="number">8</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html; charset=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>不过现在的浏览器都支持多种字符集，通常不会发送 Accept-Charset，而服务器也不会发送 Content-Language，因为使用的语言完全可以由字符集推断出来，所以在请求头里一般只会有 Accept-Language 字段，响应头里只会有 Content-Type 字段。</p>
<h3 id="内容协商的质量值"><a href="#内容协商的质量值" class="headerlink" title="内容协商的质量值"></a>内容协商的质量值</h3><p>在 HTTP 协议里用 Accept、Accept-Encoding、Accept-Language 等请求头字段进行内容协商的时候，还可以用一种特殊的“q”参数表示权重来设定优先级，这里的“q”是“quality factor”的意思。</p>
<p>权重的最大值是 1，最小值是 0.01，默认值是 1，如果值是 0 就表示拒绝。具体的形式是在数据类型或语言代码后面加一个“;”，然后是“q&#x3D;value”。</p>
<p>这里要提醒的是“;”的用法，在大多数编程语言里“;”的断句语气要强于“,”，而在 HTTP 的内容协商里却恰好反了过来，“;”的意义是小于“,”的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Accept</span>: text/html,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br></pre></td></tr></table></figure>

<p>它表示浏览器最希望使用的是 HTML 文件，权重是 1，其次是 XML 文件，权重是 0.9，最后是任意数据类型，权重是 0.8。服务器收到请求头后，就会计算权重，再根据自己的实际情况优先输出 HTML 或者 XML。</p>
<p>例题:</p>
<p>要使用 POST 方法向服务器提交一些 JSON 格式的数据，里面包含有中文，请求头应该是什么样子的呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json, charset=utf-<span class="number">8</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Language</span>: zh-<span class="variable constant_">CN</span>, zh</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>charset不同同时使用两种编码</li>
<li>Content-Language表示的是body数据的语言，因为post带有body，所以要用Content-Language来告诉服务器，报文的body是什么。</li>
<li>Accept-Language是请求头字段，只要是发请求就可以带。 </li>
<li>Content-Language是实体头字段，只要是有body就可以带。</li>
</ul>
<p>对应关系：</p>
<img alt='对应关系' src="https://hrmtest.oss-cn-beijing.aliyuncs.com/WS7PL%29%5BGQ0S%7D%60TKFXR3L4KE.jpg" style="zoom:33%;" />]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
        <category>HTTP</category>
        <category>数据类型与编码</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTP的实体数据</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（四）</title>
    <url>/2022/07/22/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="短链接"><a href="#短链接" class="headerlink" title="短链接"></a>短链接</h1><p>HTTP 协议最初（0.9&#x2F;1.0）是个非常简单的协议，通信过程也采用了简单的“请求 - 应答”方式。</p>
<p>它底层的数据传输基于 TCP&#x2F;IP，每次发送请求前需要先与服务器建立连接，收到响应报文后会立即关闭连接。</p>
<p>因为客户端与服务器的整个连接过程很短暂，不会与服务器保持长时间的连接状态，所以就被称为“短连接”（short-lived connections）。早期的 HTTP 协议也被称为是“无连接”的协议。</p>
<h1 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h1><p>针对短连接暴露出的缺点，HTTP 协议就提出了“长连接”的通信方式，也叫“持久连接”（persistent connections）、“连接保活”（keep alive）、“连接复用”（connection reuse）。</p>
<p>其实解决办法也很简单，用的就是“成本均摊”的思路，既然 TCP 的连接和关闭非常耗时间，那么就把这个时间成本由原来的一个“请求 - 应答”均摊到多个“请求 - 应答”上。</p>
<p>长短连接对比：</p>
<img alt='长短连接对比' src="https://hrmtest.oss-cn-beijing.aliyuncs.com/57b3d80234a1f1b8c538a376aa01d3b4.webp" style="zoom: 50%;" />

<p>相关头字段：</p>
<ul>
<li><strong>Connection</strong>：（响应字段）想要长连，接取值<strong>keep-alive</strong>。由服务器告知客户端，服务器支持长连接。<ul>
<li>在 HTTP&#x2F;1.1 中的连接都会默认启用长连接。不需要用什么特殊的头字段指定，只要向服务器发送了第一次请求，后续的请求都会重复利用第一次打开的 TCP 连接，也就是长连接，在这个连接上收发数据。当然也可以 明确使用长连接。</li>
</ul>
</li>
</ul>
<p>缺点：</p>
<p>TCP 连接长时间不关闭，服务器必须在内存里保存它的状态，这就占用了服务器的资源。</p>
<p>如果有大量的空闲长连接只连不发，就会很快耗尽服务器的资源，导致服务器无法为真正有需要的用户提供服务。</p>
<p>所以，长连接也需要在恰当的时间关闭，不能永远保持与服务器的连接，<strong>这在客户端或者服务器都可以做到。</strong></p>
<ul>
<li><strong>Connection:</strong> （请求字段）close。客户端告知服务端，停止长连接。同时在客户端的响应字段也加上<strong>Connection: close</strong>，此时，长连接关闭。</li>
</ul>
<p>服务器端通常不会主动关闭连接，但也可以使用一些策略。拿 Nginx 来举例，它有两种方式：</p>
<ol>
<li>使用“keepalive_timeout”指令，设置长连接的超时时间，如果在一段时间内连接上没有任何数据收发就主动断开连接，避免空闲连接占用系统资源。</li>
<li>使用“keepalive_requests”指令，设置长连接上可发送的最大请求次数。比如设置成 1000，那么当 Nginx 在这个连接上处理了 1000 个请求后，也会主动断开连接。</li>
<li>另外，客户端和服务器都可以在报文里附加通用头字段“Keep-Alive: timeout&#x3D;value”，限定长连接的超时时间。但这个字段的约束力并不强，通信的双方可能并不会遵守，所以不太常见。</li>
</ol>
<h1 id="队头阻塞"><a href="#队头阻塞" class="headerlink" title="队头阻塞"></a>队头阻塞</h1><p>“队头阻塞”与短连接和长连接无关，而是由 HTTP 基本的“请求 - 应答”模型所导致的。</p>
<p>根源：HTTP是半双工的协议，只能一发一收，这是对头阻塞的本质。</p>
<p>因为 HTTP 规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求没有轻重缓急的优先级，只有入队的先后顺序，排在最前面的请求被最优先处理。</p>
<p>如果<strong>队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本。</strong></p>
<img alt='队头阻塞' src="https://hrmtest.oss-cn-beijing.aliyuncs.com/6a6d30a89fb085d5f1773a887aaf5572.webp" style="zoom:50%;" />

<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>请求 - 应答”模型不能变，所以“队头阻塞”问题在 HTTP&#x2F;1.1 里无法解决，只能缓解。</p>
<h2 id="并发连接"><a href="#并发连接" class="headerlink" title="并发连接"></a>并发连接</h2><p>就是同时对一个域名发起多个长连接，用数量来解决质量的问题。</p>
<p>但这种方式也存在缺陷。如果每个客户端都想自己快，建立很多个连接，用户数×并发数就会是个天文数字。服务器的资源根本就扛不住，或者被服务器认为是恶意攻击，反而会造成“拒绝服务”。</p>
<p>所以，HTTP 协议建议客户端使用并发，但不能“滥用”并发。RFC2616 里明确限制每个客户端最多并发 2 个连接。不过实践证明这个数字实在是太小了，众多浏览器都“无视”标准，把这个上限提高到了 6~8。后来修订的 RFC7230 也就“顺水推舟”，取消了这个“2”的限制。</p>
<h2 id="域名分片"><a href="#域名分片" class="headerlink" title="域名分片"></a>域名分片</h2><p>由于HTTP和浏览器的并发限制，该方法还是用数量来解决质量的思路，</p>
<p>即：建立多个域名到同一个ip的映射，而这些域名都指向同一台服务器，对于网络请求进一步分流，这样实际的长连接就上去了。</p>
<p>疑问：多开几个域名，最终都是指向一个服务器，那跟都直接连一个服务器的效果一样，对服务器的性能要求一样，没有减少后端的压力？</p>
<p>域名分片解决的是客户端并发的问题，可以创建更多的连接。 比如浏览器限制一个域名最多6个连接，域名分3片，那么浏览器就可以同时建立18个连接，显然就能够并发更多请求，获取数据也就快了。</p>
<p>其他知识补充：</p>
<ul>
<li>服务端开发，长短连接如何选择？<ul>
<li>一般使用长连接，除非明确知道只会发送一个请求，比如游戏内</li>
<li>连接兑换码服务进行礼包兑换。</li>
</ul>
</li>
<li>并发请求和并发连接<ul>
<li>并发请求：服务端的概念，有多个客户端连接服务器。</li>
<li>并发连接：客户端的概念，一个浏览器并发多个连接，访问服务器（有可能是一个用户）。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
        <category>HTTP</category>
        <category>长短连接</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTP的连接管理</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记（六）</title>
    <url>/2022/07/23/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie相关字段"><a href="#Cookie相关字段" class="headerlink" title="Cookie相关字段"></a>Cookie相关字段</h2><ul>
<li><strong>Set-Cookie</strong>：（响应字段）值：key&#x3D;value	<ul>
<li>浏览器收到响应报文，看到里面有 Set-Cookie，知道这是服务器给的身份标识，于是就保存起来，下次再请求的时候就自动把这个值放进 Cookie 字段里发给服务器。</li>
<li>服务器有时会在响应头里添加多个 Set-Cookie，存储多个“key&#x3D;value”。但浏览器这边发送时不需要用多个 Cookie 字段，只要在一行里用“;”隔开就行。</li>
</ul>
</li>
<li><strong>Cookie</strong>：（请求字段）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一次请求</span></span><br><span class="line"><span class="variable constant_">GET</span>/ <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span> : xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>: a=xxX</span><br><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>: b=yyy</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次请求</span></span><br><span class="line"><span class="variable constant_">GET</span>/ <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: xxxx</span><br><span class="line"><span class="title class_">Cookie</span>: a=xxxp; b=yyy</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//  第一次访问</span></span><br><span class="line">  <span class="keyword">if</span> (!ctx.<span class="property">header</span>.<span class="property">cookie</span>) &#123;</span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hrm&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;first visit&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`you is <span class="subst">$&#123;ctx.header.cookie.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>

<h2 id="Cookie的属性"><a href="#Cookie的属性" class="headerlink" title="Cookie的属性"></a>Cookie的属性</h2><p>Cookie 就是服务器委托浏览器存储在客户端里的一些数据，而这些数据通常都会记录用户的关键识别信息。所以，就需要在“key&#x3D;value”外再用一些手段来保护，防止外泄或窃取，这些手段就是 Cookie 的属性。</p>
<p>Cookie的属性均由服务端设定，因为Set-Cookie是响应字段。</p>
<p><strong>首先</strong>，设置 Cookie 的生存周期，也就是它的有效期，让它只能在一段时间内可用，就像是食品的“保鲜期”，一旦超过这个期限浏览器就认为是 Cookie 失效，在存储里删除，也不会发送给服务器。</p>
<ul>
<li><strong>Expires</strong>：俗称“过期时间”，用的是绝对时间点，可以理解为“截止日期”</li>
<li><strong>Max-Age</strong>：相对时间，单位是秒，浏览器用收到报文的时间点再加上 Max-Age，就可以得到失效的绝对时间。<ul>
<li>Expires 和 Max-Age 可以同时出现，两者的失效时间可以一致，也可以不一致，但浏览器会优先采用 Max-Age 计算失效期。</li>
</ul>
</li>
</ul>
<p><strong>其次</strong>，我们需要设置 Cookie 的作用域，让浏览器仅发送给特定的服务器和 URI，避免被其他网站盗用。</p>
<ul>
<li><strong>Domain</strong></li>
<li><strong>Path</strong><ul>
<li>“Domain”和“Path”指定了 Cookie 所属的域名和路径，浏览器在发送 Cookie 前会从 URI 中提取出 host 和 path 部分，对比 Cookie 的属性。如果不满足条件，就不会在请求头里发送 Cookie。</li>
</ul>
</li>
</ul>
<p><strong>最后，Cookie的安全性</strong></p>
<p>在 JS 脚本里可以用 document.cookie 来读写 Cookie 数据，这就带来了安全隐患，有可能会导致“跨站脚本”（<strong>XSS</strong>）攻击窃取数据。</p>
<ul>
<li><strong>HttpOnly</strong>：告诉浏览器，此 Cookie 只能通过浏览器 HTTP 协议传输，禁止其他方式访问，浏览器的 JS 引擎就会禁用 document.cookie 等一切相关的 API，脚本攻击也就无从谈起了。</li>
<li><strong>SameSite</strong>：可以防范“<strong>跨站请求伪造</strong>”（<strong>XSRF</strong>）攻击，设置成“<strong>SameSite&#x3D;Strict</strong>”可以严格限定 Cookie 不能随着跳转链接跨站发送，而“SameSite&#x3D;Lax”则略宽松一点，允许 GET&#x2F;HEAD 等安全方法，但禁止 POST 跨站发送。</li>
<li><strong>Secure</strong>：表示这个 Cookie 仅能用 HTTPS 协议加密传输，明文的 HTTP 协议会禁止发送。但 Cookie 本身不是加密的，浏览器里还是以明文的形式存在。</li>
</ul>
<h2 id="Cookie的应用"><a href="#Cookie的应用" class="headerlink" title="Cookie的应用"></a>Cookie的应用</h2><ul>
<li>身份识别：保存用户的登录信息，实现会话事务。</li>
<li>广告跟踪：很多的广告图片，这些图片背后都是广告商网站（例如 Google），它会“偷偷地”贴上 Cookie 小纸条，这样上其他的网站，别的广告就能用 Cookie 读出你的身份，然后做行为分析，再推给你广告。<ul>
<li>这种 Cookie 不是由访问的主站存储的，所以又叫“第三方 Cookie”</li>
</ul>
</li>
</ul>
<p><strong>注意：</strong>Cookie 并不属于 HTTP 标准（RFC6265，而不是 RFC2616&#x2F;7230），所以语法上与其他字段不太一致，使用的分隔符是“;”，与 Accept 等字段的“,”不同</p>
<p>知识补充：</p>
<ul>
<li>早期Cookie直接就是磁盘上的一些小文本文件，现在基本上都是以数据库记录的形式存放的(通常使用的是Sqlite)。浏览器对Cookie的数量和大小也都有限制，不允许无限存储，<strong>一般总大小不能超过4K</strong>。</li>
<li>如果不指定Expires或 Max-Age 属性，那么Cookie仅在浏览器运行时有效，一旦浏览器关闭就会失效，这被称为会话Cookie (sessioncookie)或内存Cookie (in-memory cookie),在Chrome里过期时间会显示为“Session”或“N&#x2F;A”。</li>
<li>Max-Age&#x3D;0，表示不能缓存，但在会话期间是可用的，浏览器会话关闭之前可以用cookie记录用户的信息。Max_Age&lt;0，统一按0算，立即过期。</li>
</ul>
<h1 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h1><h2 id="服务器缓存"><a href="#服务器缓存" class="headerlink" title="服务器缓存"></a>服务器缓存</h2><p>相关字段</p>
<ul>
<li><p><strong>Cache-Control</strong>：（通用字段）</p>
<p>服务器可以发“Cache-Control”头，浏览器也可以发“Cache-Control”，也就是说请求 - 应答的双方都可以用这个字段进行缓存控制，互相协商缓存的使用策略。</p>
<ul>
<li><p><strong>属性</strong>：</p>
</li>
<li><p><strong>public和prevate</strong></p>
<p><code>public</code> 表示该资源可以被所有客户端和代理服务器缓存，</p>
<p> <code>private</code> 表示该资源仅能客户端缓存。默认值是 <code>private</code>，当设置了 <code>s-maxage</code> 的时候表示允许代理服务器缓存，相当于 <code>public</code>。</p>
</li>
<li><p><strong>Max-Age和S-Maxage</strong>：表示资源的有效期，值为number，秒钟。</p>
<ul>
<li>时间的计算起点是响应报文的创建时刻（即 Date 字段，也就是离开服务器的时刻），而不是客户端收到报文的时刻，也就是说包含了在链路传输过程中所有节点所停留的时间。</li>
<li>服务器设定“max-age&#x3D;5”，但因为网络质量很糟糕，等浏览器收到响应报文已经过去了 4 秒，那么这个资源在客户端就最多能够再存 1 秒钟，之后就会失效。</li>
<li>两者是 <code>cache-control</code> 的主要字段，它们是一个数字，表示资源过了多少秒之后变为无效。在浏览器中，<code>max-age</code> 和 <code>s-maxage</code> 都起作用，而且 <code>s-maxage</code> 的优先级高于 <code>max-age</code>。<strong>在代理服务器中，只有 <code>s-maxage</code> 起作用</strong>。 可以通过设置 <code>max-age</code> 为 0 表示立马过期来向服务器请求资源。</li>
</ul>
</li>
<li><p><strong>no-store</strong>：不允许缓存，用于某些变化非常频繁的数据，例如秒杀页面；</p>
</li>
<li><p><strong>no-cache</strong>：并不是不允许缓存，而是<strong>可以缓存</strong>，但在使用之前必须要去服务器验证是否过期，是否有最新的版本，如果有就使用最新的数据<strong>（协商缓存）</strong>。</p>
<ul>
<li>即：no-cache总是使用服务端的最新数据，如果没有最新的数据在使用本地缓存.</li>
<li>但是,在使用no-cache属性时,也向服务端发送了一次请求,同样有效率损耗,但是这个报文很小,不像是最新的资源,会传输最完整的报文,导致成本高.</li>
<li>由于<strong>no-cache和no-store</strong>都不考虑缓存情况而是直接与服务器交互，所以当 <code>no-cache</code> 和 <code>no-store</code> 存在时会直接忽略 <code>max-age</code> 等。</li>
<li>如果<strong>Cache-Control</strong>没有设置<strong>no-cache</strong>和<strong>no-store</strong>属性，则默认进行强缓存（本都磁盘读取）。</li>
</ul>
</li>
<li><p><strong>must-revalidate</strong>：如果缓存不过期就可以继续使用，但过期了如果还想用就必须去服务器验证。</p>
<ul>
<li><strong>no-store</strong>:买来的西瓜不允许放进冰箱，要么立刻吃，要么立刻扔掉;</li>
<li><strong>no-cache:</strong> 可以放进冰箱，但吃之前必须问超市有没有更新鲜的，有就吃超市里的;</li>
<li>**must-revalidate:**可以放进冰箱，保鲜期内可以吃，过期了就要问超市让不让吃。</li>
</ul>
<img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/1b4f48bc0d8fb9a08b45d1f0deac8a99.webp" alt="属性对比图图示" style="zoom: 50%;" /></li>
</ul>
</li>
</ul>
<h2 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h2><p>客户端缓存具体参看，</p>
<p><a href='http://localhost:4000/2022/07/23/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/'>HTTP学习笔记（七）</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&#x27;Max-Age=5&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当浏览器多次刷新，会发现每次得到的随机数还是会变化</p>
<p>原因是：</p>
<ul>
<li>浏览器会在请求头里加一个“<strong>Cache-Control: max-age&#x3D;0</strong>”。因为 max-age 是“生存时间”，max-age&#x3D;0 表示缓存立即过期，需要最新的数据，而本地缓存里的数据至少保存了几秒钟，所以浏览器就不会使用缓存，而是向服务器发请求。<ul>
<li>即：按F5刷新页面，浏览器直接让缓存过期，与服务端进行<strong>协商缓存</strong>。</li>
</ul>
</li>
<li>服务器看到 max-age&#x3D;0，也就会用一个最新生成的报文回应浏览器。</li>
<li>Ctrl+F5 的“强制刷新”：它其实是发了一个“<strong>Cache-Control: no-cache</strong>”（浏览器强制设置），<strong>含义和“max-age&#x3D;0”基本一样</strong>，强制获取最新的资源，就连 <code>if-modified-since</code> 等其他缓存协议字段都会被吃掉。</li>
</ul>
<p>点击浏览器的“前进”“后退”按钮，再看开发者工具，发现“from disk cache”的字样，意思是没有发送网络请求，而是读取的磁盘上的缓存。另外，浏览器的重定向和跳转，也使用了缓存。</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220723182348017.png" alt="图示"></p>
<p>可以理解为：在<strong>“前进”“后退”“跳转”这些重定向动作中浏览器不会“夹带私货”</strong>，只用最基本的请求头，没有“Cache-Control”，所以就会检查缓存，直接利用之前的资源，不再进行网络通信。</p>
<h2 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a>条件请求</h2><p><font color=red>浏览器用“Cache-Control”做缓存控制只能是刷新数据，不能很好地利用缓存数据，又因为缓存会失效，使用前还必须要去服务器验证是否是最新版。</font>这也是条件请求产生的原因。</p>
<p>浏览器可以用两个连续的请求组成“验证动作”：先是一个 HEAD，获取资源的修改时间等元信息，然后与缓存数据比较，如果没有改动就使用缓存，节省网络流量，否则就再发一个 GET 请求，获取最新的版本。</p>
<p>但这样的两个请求网络成本太高了，所以 HTTP 协议就定义了一系列“If”开头的“条件请求”字段，专门用来检查验证资源是否过期，把两个请求才能完成的工作合并在一个请求里做。而且，验证的责任也交给服务器，浏览器只需“坐享其成”。</p>
<p>相关字段：</p>
<p>条件请求一共有 5 个头字段，我们最常用的是<strong>“if-Modified-Since”</strong>（请求字段）和<strong>“If-None-Match”</strong>（请求字段）这两种。</p>
<p>其中，和<strong>if-Modified-Since</strong>配合的<strong>响应字段是Last-Modify</strong></p>
<p>和<strong>If-None-Match</strong>配合的<strong>响应字段是Etags</strong></p>
<p>第一种：</p>
<ul>
<li><strong>Last-modified</strong>：（响应头字段）表示文件的最后修改时间。在浏览器<strong>第一次</strong>请求某一个URL时，服务器端的返回状态会是200，内容是客户端请求的资源，同时有一个<strong>Last-Modified</strong>的属性标记此文件在服务期端最后被修改的时间。</li>
<li>在客户端后来的请求中（非第一次），服务端会对比该字段和资源的最后修改时间（客户端携带的If-Modify-Since字段），若一致则证明没有被修改，告知浏览器可直接使用缓存并返回 304；若不一致则直接返回修改后的资源，并修改 <code>last-modified</code> 为新的值。</li>
<li><strong>if-Modified-Since</strong>：（请求头字段）客户端<strong>第二次以及之后请求</strong>请求此URL时，根据 HTTP 协议的规定，浏览器会向服务器传送If-Modified-Since 报头（在第一次访问时的时间被存储的值），询问该时间之后文件是否有被修改过，具体的时间表示<strong>本地浏览器存储的文件修改时间</strong>。<ul>
<li>如果服务器端的资源没有变化，则时间一致，自动返回HTTP状态码304（Not Changed.）状态码，内容为空，客户端接到之后，就直接把本地缓存文件显示到浏览器中，这样就节省了传输数据量。</li>
<li>如果服务器端资源发生改变或者重启服务器时，时间不一致，就返回HTTP状态码200和新的文件内容，客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示到浏览器中。</li>
</ul>
</li>
</ul>
<p>缺点：</p>
<ol>
<li>只要编辑了（例如增加无用的空格），不管内容是否真的有改变，都会以这最后修改的时间作为判断依据，当成新资源返回，从而导致了没必要的请求响应，而这正是缓存本来的作用，即避免没必要的请求。</li>
<li>时间的精确度只能到秒，如果在一秒内的修改是检测不到更新的，仍会告知浏览器使用旧的缓存。</li>
</ol>
<p>第二种：</p>
<p>第二种方式的出现解决了第一种方式的缺点。</p>
<ul>
<li><strong>If-None-Match</strong>：（请求头字段）：服务端传过来的<strong>Etag的值</strong></li>
<li><strong>ETag</strong>：（通用字段）“Entity Tag”，实体标签，<strong>资源的唯一标识</strong>，主要是用来解决修改时间无法准确区分文件变化的问题。<ul>
<li>比如，一个文件在一秒内修改了多次，但因为修改时间是秒级，所以这一秒内的新版本无法区分。</li>
<li>比如，一个文件定期更新，但有时会是同样的内容，实际上没有变化，用修改时间就会误以为发生了变化，传送给浏览器就会浪费带宽。</li>
<li>使用 ETag 就可以精确地识别资源的变动情况，只要文件有改动，就生成最新的<strong>Etag</strong>的值（解决上述缺点2），让浏览器能够更有效地利用缓存。</li>
<li>ETag的强弱之分：<ul>
<li>强 ETag 要求资源在字节级别必须完全相符，</li>
<li>弱 ETag 在值前有个“W&#x2F;”标记，只要求资源在语义上没有变化，但内部可能会有部分发生了改变（例如 HTML 里的标签顺序调整，或者多了几个空格）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<img  alt='图示' src="https://hrmtest.oss-cn-beijing.aliyuncs.com/b239d0804be630ce182e24ea9e4ab237.webp" style="zoom:40%;" />

<p>Etag的工作原理 </p>
<ul>
<li>Etag在服务器上生成后,客户端通过If-Match或者说If-None-Match这个条件判断请求来验证资源是否修改.我们常见的是使用If-None-Match.</li>
<li>请求一个文件的流程如下： 新的请求 客户端发起HTTP GET请求一个文件(css ,image,js)；</li>
<li>服务器处理请求,返回文件内容和一堆Header(包括Etag,例如”2e681a-6-5d044840”),http头状态码为为200. </li>
<li>同一个用户第二次这个文件的请求 客户端在一次发起HTTP GET请求一个文件,注意这个时候客户端同时发送一个If-None-Match头,这个头中会包括上次这个文件的Etag(例如”2e681a- 6-5d044840”) </li>
<li>这时服务器判断发送过来的Etag和自己计算出来的Etag,因此If-None-Match为False,不返回200,返 回304,客户端继续使用本地缓存；</li>
</ul>
<p>需要第一次的响应报文预先提供“Last-modified”或者“ETag”，然后第二次请求时就可以带上缓存里的原值，验证资源是否是最新的。</p>
<p>如果资源没有变，服务器就回应一个“304 Not Modified”，表示缓存依然有效，浏览器就可以更新一下有效期，然后放心大胆地使用缓存了。</p>
<p>条件请求里其他的三个头字段是“<strong>If-Unmodified-Since”“If-Match”和“If-Range”</strong>，掌握了“if-Modified-Since”和“If-None-Match”，可以轻易地“举一反三”。</p>
<ul>
<li>注意:<ul>
<li><strong>服务器又设置了Cache-Control:max-age和Expires时,会同时使用,也就是说在完全匹配If-Modified-Since和If-None-Match,即检查完修改时间和Etag之后,服务器才能返回304.</strong></li>
<li>Expires属于HTTP1.0规定的缓存字段，若两者在响应头中均出现，<strong>Cache-Control的优先级更高</strong></li>
<li>Etag比last-modify优先级高。</li>
</ul>
</li>
</ul>
<p>这两种方式，</p>
<h1 id="其他知识补充"><a href="#其他知识补充" class="headerlink" title="其他知识补充"></a>其他知识补充</h1><ul>
<li><p>浏览器也可以发送“Cache-Control”字段，使用“max-age&#x3D;0”（<strong>刷新</strong>）或“no_cache”（<strong>Ctrl + F5强制刷新</strong>）刷新数据。</p>
</li>
<li><p>即使有Last-Modify和Etags响应字段，浏览器依然可以使用Ctrl+F5强制刷新，得到的状态码是200和最新的资源。</p>
<ul>
<li>原因：强制刷新是因为请求头里的 If-Modified-Since 和 If-None-Match 会被清空所以会返回最新数据</li>
</ul>
</li>
<li><p>no-cache可以理解为，’Max-Age&#x3D;0, Must-revalidate’，</p>
</li>
<li><p>除了“Cache-Control”，服务器也可以用“Expires”字段来标记资源的有效期，它的形式和Cookie 的差不多，同样属于“过时”的属性，优先级低于“Cache-Control”。</p>
</li>
<li><p>如果响应报文里提供了“Last-modified”，但没有“Cache-Control”或“Expires”，浏览器会使用“启发”(Heuristic)算法计算一个缓存时间，在RFC里的建议是:(Date -Last-modified) * 10%。</p>
</li>
<li><p>每个Web服务器对ETag的计算方法都不一样，只要保证数据变化后值不一样就好，但复杂的计算会增加服务器的负担。Nginx的算法是“修改时间＋长度”，实际上和Last-modifed基本等价。</p>
</li>
<li><p>cache和cookie的不同点以及相同点：</p>
<ul>
<li>不同点：</li>
<li>Cookie 会随请求报文发送到服务器，而 Cache 不会，但可能会携带 if-Modified-Since（保存资源的最后修改时间）和 If-None-Match（保存资源唯一标识） 字段来验证资源是否过期。 </li>
<li>Cookie 在浏览器可以通过脚本获取（如果 cookie 没有设置 HttpOnly），Cache 则无法在浏览器中获取（出于安全原因）</li>
<li>Cookie 通过响应报文的 Set-Cookie 字段获得，Cache缓存的是完整的报文</li>
<li>用途不同。Cookie 常用于身份识别，Cache 则是由浏览器管理，用于节省带宽和加快响应速度。</li>
<li>Cookie 的 max-age 是从浏览器拿到响应报文时开始计算的，而 Cache 的 max-age 是从响应报文的生成时间（Date 头字段）开始计算。</li>
</ul>
</li>
<li><p>cache-control中的private识别:缓存策略取决于服务器，它认为这个缓存只能存放在客户端，不能存放在代理上，就设置private。</p>
</li>
<li><p>强缓存和协商缓存</p>
<ul>
<li>强缓存:浏览器直接从本地缓存中获取数据，不与服务器进行交互,返回的状态码是 <strong>200</strong></li>
<li>协商缓存:浏览器发送请求到服务器，服务器判断是否可使用本地缓存.<strong>会去服务器比对</strong>，若没改变才直接读取本地缓存，返回的状态码是 <strong>304</strong>。<ul>
<li>Last-Modify和If-Modify-Since搭配</li>
<li>Etag和If-None-Match搭配</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>缓存参考文档:</p>
<ul>
<li><a href="https://www.jianshu.com/p/fb59c770160c/">https://www.jianshu.com/p/fb59c770160c/</a></li>
<li><a href="https://time.geekbang.org/column/article/106804">https://time.geekbang.org/column/article/106804</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
        <category>HTTP</category>
        <category>Cookie</category>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>计算机网络</tag>
        <tag>HTTP的Cookie</tag>
        <tag>HTTP的缓存控制</tag>
        <tag>跨站脚本攻击</tag>
        <tag>跨站请求伪造</tag>
        <tag>XSS</tag>
        <tag>XSRF</tag>
        <tag>强缓存</tag>
        <tag>协商缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>js异常处理</title>
    <url>/2022/07/21/js%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="错误处理方案"><a href="#错误处理方案" class="headerlink" title="错误处理方案"></a>错误处理方案</h1><ul>
<li><p>不捕获，错误会一直向上抛</p>
</li>
<li><p>try&amp;&amp;catch&amp;&amp;finally</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> num2 === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;the expected params is type of number&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">// 模拟兜底处理</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误上报&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最终执行的代码&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h1><p>throw可以抛出的数据类型</p>
<ul>
<li>基本类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;error msg&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> &#123;<span class="attr">code</span>:-<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;错误类型详细描述&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义类</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">code, msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">code</span> = code;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span> = msg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> num2 === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyError</span>(-<span class="number">1</span>, <span class="string">&quot;the expected params is type of number&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>错误类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error desc&#x27;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Type Error desc&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>实例化的错误类型的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;the expected params is type of number&quot;</span>)));</span><br><span class="line"><span class="comment">// srack 调用栈信息</span></span><br><span class="line"><span class="comment">// message  错误描述（参数）</span></span><br></pre></td></tr></table></figure>

<h1 id="Error的子类"><a href="#Error的子类" class="headerlink" title="Error的子类"></a>Error的子类</h1><ul>
<li><p>TypeError：类型错误</p>
</li>
<li><p>RangeError：下标值越界</p>
</li>
<li><p>SyntaxError：语法错误</p>
</li>
</ul>
<p>强调：</p>
<ul>
<li>如果抛出了异常，后续的代码都不会执行，抛出的错误需要在上层捕获并进行兜底处理。</li>
<li>从ES10开始，catch的参数可以不用进行传递，开发者知道出现了了异常但是不用知道具体的异常信息，可以省略。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; &#125; <span class="keyword">catch</span> &#123; &#125; <span class="keyword">finally</span> &#123; &#125; </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
        <category>异常处理</category>
      </categories>
      <tags>
        <tag>js异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>node学习笔记（一）</title>
    <url>/2022/07/12/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p>node是使用C++、C、js（给js本身调用时提供的一些api）等编写的</p>
<p>node的核心层：<strong>libuv是由C编写的库</strong>；底层通过对操作系统的一些调用由<strong>中间层</strong><code>libuv</code>来完成</p>
<p>libuv提供了<strong>事件循环、文件系统读写、网络IO、线程池</strong>等等内容</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220712144326843.png" alt="Node架构"></p>
<center>node架构图</center>

<h1 id="Node应用场景"><a href="#Node应用场景" class="headerlink" title="Node应用场景"></a>Node应用场景</h1><ul>
<li>前端开发的库都是以node包的形式进行管理；</li>
<li>npm，cnpm、yarn、pnpm成为前端开发使用最多的工具；</li>
<li>使用Nodejs作为web服务器开发、中间件、代理服务器；</li>
<li>大量项目需要借助Node.js完成前后端渲染的同构应用;（SSR）</li>
<li>资深前端工程师需要为项目编写脚本工具；（前端工程师编写脚本通常会使用JavaScript）</li>
<li>很多企业在使用Electron来开发桌面应用程序;（Electron是基于Node的并且需要Node环境）</li>
</ul>
<h1 id="Node版本管理"><a href="#Node版本管理" class="headerlink" title="Node版本管理"></a>Node版本管理</h1><p>macOS：n&#x2F;nvm</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -g n</span><br><span class="line">n --version</span><br><span class="line"><span class="comment">// 安装最新的稳定版本</span></span><br><span class="line">n lts</span><br><span class="line"><span class="comment">// 安装最新的版本</span></span><br><span class="line">n latest</span><br><span class="line"><span class="comment">// 查看所有的版本</span></span><br><span class="line">n</span><br></pre></td></tr></table></figure>

<p>window：nvm-windows</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装最新的node版本n</span></span><br><span class="line">nvm install latest</span><br><span class="line"><span class="comment">// 罗列目前安装的所有版本</span></span><br><span class="line">nvm list</span><br><span class="line"><span class="comment">// 版本切换(需要管理员权限)</span></span><br><span class="line">mvn use</span><br></pre></td></tr></table></figure>

<h1 id="Node的输入和输出"><a href="#Node的输入和输出" class="headerlink" title="Node的输入和输出"></a>Node的输入和输出</h1><h2 id="process（输入）"><a href="#process（输入）" class="headerlink" title="process（输入）"></a>process（输入）</h2><ul>
<li>process（进程对象）可用来获取用户终端输入</li>
</ul>
<p>示例：</p>
<p>在终端输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node test.<span class="property">js</span> <span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>test.js文件代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// argv=&gt;arguments vector</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">argv</span>);</span><br><span class="line"><span class="comment">// [ &#x27;D:\\nvmNode\\node.exe&#x27;, &#x27;F:\\myBlog\\test.js&#x27;, &#x27;10&#x27;, &#x27;20&#x27; ]</span></span><br><span class="line"><span class="comment">// 第一个参数是当前node所在的文件夹，第二个参数是需要运行的js文件，之后的参数是用户的输入</span></span><br><span class="line"><span class="keyword">let</span> [, , str1, str2] = process.<span class="property">argv</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((str1 + str2).<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他应用应用场景</span></span><br><span class="line"><span class="comment">// 以下命令可以让webpack来判断当前所处的是开发环境还是生产环境</span></span><br><span class="line">node ./webpack.<span class="property">config</span>.<span class="property">js</span> env=development</span><br></pre></td></tr></table></figure>

<p>process还能够查看系统的其他一些信息：<strong>操作系统类型</strong>、<strong>node版本</strong>和<strong>V8的版本</strong>等。</p>
<h3 id="其他方法："><a href="#其他方法：" class="headerlink" title="其他方法："></a>其他方法：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">nextTick</span>()</span><br></pre></td></tr></table></figure>



<h2 id="console（输出）"><a href="#console（输出）" class="headerlink" title="console（输出）"></a>console（输出）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空控制台</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"><span class="comment">// 输出调用栈</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">trace</span>()</span><br></pre></td></tr></table></figure>

<h1 id="Node全局对象"><a href="#Node全局对象" class="headerlink" title="Node全局对象"></a>Node全局对象</h1><h2 id="特殊的全局对象"><a href="#特殊的全局对象" class="headerlink" title="特殊的全局对象"></a>特殊的全局对象</h2><p><code>__dirname</code>、<code>__filename</code>、<code>exports</code>、<code>module</code>、<code>require()</code></p>
<p>这些全局对象是模块中的变量，只是每个模块都有，看起来像全局变量，但是在命令行交互是不能使用的。</p>
<ul>
<li>__dirname：表示当前文件所在的目录；</li>
<li>__filename：表示当前文件所在的目录以及文件名；</li>
</ul>
<p>注意：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span></span><br></pre></td></tr></table></figure>

<h2 id="定时器函数"><a href="#定时器函数" class="headerlink" title="定时器函数"></a>定时器函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span></span><br><span class="line"><span class="built_in">setInterval</span></span><br><span class="line">setImmediate</span><br><span class="line"><span class="comment">// 添加到下一次的tick队列</span></span><br><span class="line">process.<span class="property">nextTick</span></span><br></pre></td></tr></table></figure>

<h2 id="global对象"><a href="#global对象" class="headerlink" title="global对象"></a>global对象</h2><p>在node环境下，全局对象为<code>global</code>；在浏览器环境下，全局对象为<code>window</code>；在后来的版中，使用统一的名称<code>globalThis</code>作为全局对象，在浏览器环境指向<code>this</code>，在node环境指向<code>global</code>。</p>
<p>说明：使用<code>var</code>声明的变量在浏览器环境下会自动加入到window的一个属性中，在node环境下不会。</p>
]]></content>
      <categories>
        <category>Node</category>
        <category>Node的输入和输出</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>前端相关文档</title>
    <url>/2022/06/03/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p><strong>精灵图制作：</strong><a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></p>
<p><strong>确定精灵图位置：</strong><a href="http://www.spritecow.com/">http://www.spritecow.com/</a></p>
<p><strong>阿里字体图标库：</strong><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p>
<p><strong>LESS-&gt;CSS：</strong><a href="https://lesscss.org/less-preview/">https://lesscss.org/less-preview/</a></p>
<p><strong>移动端适配（阿里）：</strong><a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a><br><strong>npm命令：</strong><a href="https://docs.npmjs.com/cli/v8/commands">https://docs.npmjs.com/cli/v8/commands</a><br><strong>pnpm：</strong><a href="https://pnpm.io/zh/motivation">https://pnpm.io/zh/motivation</a></p>
]]></content>
      <categories>
        <category>开发文档</category>
      </categories>
      <tags>
        <tag>前端开发相关文档</tag>
      </tags>
  </entry>
  <entry>
    <title>手写promise</title>
    <url>/2022/04/15/%E6%89%8B%E5%86%99promise/</url>
    <content><![CDATA[<h1 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h1><p>ECMAscript 6 原生提供了 Promise 对象。</p>
<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>
<h1 id="Promise-对象有以下两个特点"><a href="#Promise-对象有以下两个特点" class="headerlink" title="Promise 对象有以下两个特点:"></a>Promise 对象有以下两个特点:</h1><p>对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</p>
<ul>
<li>pending: 初始状态，不是成功或失败状态。</li>
<li>fulfilled: 意味着操作成功完成。</li>
<li>rejected: 意味着操作失败。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参考PromiseA+规范,同时根据es自身的实现逻辑添加其他操作</span></span><br><span class="line"><span class="comment">// https://promisesaplus.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态字符串(常量)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROMISE_STATUS_PENDING</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROMISE_STATUS_FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROMISE_STATUS_REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具函数</span></span><br><span class="line"><span class="comment">// 公共逻辑抽取</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">execFunctionWithCatchError</span>(<span class="params">fn, data, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">fn</span>(data);</span><br><span class="line">    <span class="title function_">resolve</span>(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PROMISE_STATUS_PENDING</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledFns</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedFns</span> = [];</span><br><span class="line">    <span class="comment">// 调用resolve状态会改变为fulfilled(resolved)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 加入到微任务队列(异步,不影响主线程)</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// queueMicrotask是异步代码,此处需要重新判断状态</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> !== <span class="variable constant_">PROMISE_STATUS_PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PROMISE_STATUS_FULFILLED</span>;</span><br><span class="line">          <span class="comment">// pending ==&gt; fulfilled</span></span><br><span class="line">          <span class="comment">// 保存fulfilled的值</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">          <span class="comment">// 执行then方法的onFulfilled回调(第一个回调)</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledFns</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 调用reject状态会改变为rejected</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 加入到微任务队列(异步,不影响主线程)</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// queueMicrotask是异步代码,此处需要重新判断状态</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> !== <span class="variable constant_">PROMISE_STATUS_PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PROMISE_STATUS_REJECTED</span>;</span><br><span class="line">          <span class="comment">// pending ==&gt; rejected</span></span><br><span class="line">          <span class="comment">// 保存rejected的值</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">          <span class="comment">// 执行then方法的onRejected回调(第二个回调)</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedFns</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果reject或者throw异常,但是没有传入then的第二个回调,需要把这个异常或者reason一直抛直到被catch捕获</span></span><br><span class="line">    onRejected = onRejected || (<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;);</span><br><span class="line">    <span class="comment">// 如果resolve没有传入,则会造成value没有处理的回调,会造成链式调用的断层</span></span><br><span class="line">    onFulfilled = onFulfilled || (<span class="function"><span class="params">value</span> =&gt;</span> value);</span><br><span class="line">    <span class="comment">// then方法返回一个MyPromise对象</span></span><br><span class="line">    <span class="comment">// resolve的value或者reject的reason都可以被认为是then方法的返回值</span></span><br><span class="line">    <span class="comment">// 使用resolve还是reject取决于传入的onFulfilled, onRejected的返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 1.如果执行then时,状态已经确定了,直接执行onFulfilled或onRejected,不用添加到执行队列里面</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PROMISE_STATUS_FULFILLED</span> &amp;&amp; <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// try &#123;</span></span><br><span class="line">        <span class="comment">//   const value = onFulfilled(this.value);</span></span><br><span class="line">        <span class="comment">//   resolve(value);</span></span><br><span class="line">        <span class="comment">// &#125; catch (error) &#123;</span></span><br><span class="line">        <span class="comment">//   reject(error);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 公共抽取</span></span><br><span class="line">        <span class="title function_">execFunctionWithCatchError</span>(onFulfilled, <span class="variable language_">this</span>.<span class="property">value</span>, resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PROMISE_STATUS_REJECTED</span> &amp;&amp; <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// try &#123;</span></span><br><span class="line">        <span class="comment">//   const reason = onRejected(this.reason);</span></span><br><span class="line">        <span class="comment">//   // 因为then方法的第二个回调也是返回一个MyPromise对象,所以此处也需要调用resolve而不是reject</span></span><br><span class="line">        <span class="comment">//   resolve(reason)</span></span><br><span class="line">        <span class="comment">// &#125; catch (error) &#123;</span></span><br><span class="line">        <span class="comment">//   reject(error);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 公共抽取</span></span><br><span class="line">        <span class="title function_">execFunctionWithCatchError</span>(onRejected, <span class="variable language_">this</span>.<span class="property">reason</span>, resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2.如果执行then时,状态还是pending,添加到执行队列里面</span></span><br><span class="line">      <span class="comment">// 因为promise的then可链式调用,保存onFulfilled, onRejected由数组来保存</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledFns</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// try &#123;</span></span><br><span class="line">            <span class="comment">//   const value = onFulfilled(this.value);</span></span><br><span class="line">            <span class="comment">//   resolve(value);</span></span><br><span class="line">            <span class="comment">// &#125; catch (error) &#123;</span></span><br><span class="line">            <span class="comment">//   reject(error);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 公共抽取</span></span><br><span class="line">            <span class="title function_">execFunctionWithCatchError</span>(onFulfilled, <span class="variable language_">this</span>.<span class="property">value</span>, resolve, reject);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedFns</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// try &#123;</span></span><br><span class="line">            <span class="comment">//   const reason = onRejected(this.reason);</span></span><br><span class="line">            <span class="comment">//   resolve(reason);</span></span><br><span class="line">            <span class="comment">// &#125; catch (error) &#123;</span></span><br><span class="line">            <span class="comment">//   reject(error);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// 公共抽取</span></span><br><span class="line">            <span class="title function_">execFunctionWithCatchError</span>(onRejected, <span class="variable language_">this</span>.<span class="property">reason</span>, resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// catch方法和finaly方法属于es6特有,不属于promiseA+规范</span></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">onFinally</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">onFinally</span>()</span><br><span class="line">    &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">onFinally</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// all</span></span><br><span class="line">  <span class="comment">// 只有所有的promise都resolve,才resolve</span></span><br><span class="line">  <span class="comment">// 有一个promise失败,就reject</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = []</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 此处保证了resolve返回的顺序和传入的自定义promise顺序一致</span></span><br><span class="line">          values[index] = res</span><br><span class="line">          count++;</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(values);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// allSettled</span></span><br><span class="line">  <span class="comment">// 不执行reject,只执行resolve</span></span><br><span class="line">  <span class="comment">// 返回的promise的包括status和value(reason)</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          count++;</span><br><span class="line">          values[index] = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: res</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(values)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          count++</span><br><span class="line">          values[index] = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>,</span><br><span class="line">            <span class="attr">reason</span>: err</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(values)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// race</span></span><br><span class="line">  <span class="comment">// 返回最先完成resolve或者reject的promise的执行结果</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// any</span></span><br><span class="line">  <span class="comment">// 返回第一个resolve的promise</span></span><br><span class="line">  <span class="comment">// 若所有的promise都reject,则reject(new AggregateError(reasons))</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reasons = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(resolve, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          count++;</span><br><span class="line">          reasons[index] = err;</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="comment">// reject(&#x27;all failed&#x27;);</span></span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(reasons));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> promise3 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">any</span>([promise, promise2, promise3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err.<span class="property">errors</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>js底层原理</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>前端</tag>
        <tag>promise</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>node学习笔记（二）</title>
    <url>/2022/07/13/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><ul>
<li>模块化开发最终的目的是将程序划分成一个个小的结构;</li>
<li>这个结构中编写属于自己的逻辑代码，有自己的作用域，定义变量名词时不会影响到其他的结构;</li>
<li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用;</li>
<li>也可以通过某种方式，导入另外结构中的变量、函数、对象等;</li>
</ul>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>js是作为一门简单的脚本语言诞生的，早期的页面很简单，在html页面使用js代码使用script标签即可。</p>
<p>但是随着前端任务量的逐渐增加，js变得越来越复杂，所以js急需一个模块化的方案。</p>
<p>在ESModule方案以及社区的CommonJS未推出之前，开发者使用<strong>立即执行函数</strong>来使用不同函数作用域下的同名变量。</p>
<h3 id="立即执行函数的弊端"><a href="#立即执行函数的弊端" class="headerlink" title="立即执行函数的弊端"></a>立即执行函数的弊端</h3><ul>
<li>我必须记得每一个模块中返回对象的命名，才能在其他模块使用过程中正确的使用;</li>
<li>代码写起来混乱不堪，每个文件中的代码都需要包裹在一个匿名函数中来编写;</li>
<li>在没有合适的规范情况下，每个人、每个公司都可能会任意命名、甚至出现模块名称相同的情况;</li>
</ul>
<h1 id="模块化方案"><a href="#模块化方案" class="headerlink" title="模块化方案"></a>模块化方案</h1><h2 id="CommonJS（CJS）"><a href="#CommonJS（CJS）" class="headerlink" title="CommonJS（CJS）"></a>CommonJS（CJS）</h2><p>CommonJS（原名ServerJS）属于社区提出的一种模块化的方案。</p>
<p> 其中，Nodejs是CommonJS在服务端的一个代表性的实现；Browserify（已过时）是CommonJS在浏览器中的一种实现;</p>
<p><strong>webpack打包工具具备对CommonJS的支持和转换;</strong></p>
<p>接下来，基于Node对CommonJS进行简单总结：</p>
<p>在Node中每一个js文件都是一个单独的模块;<br>文个模块中包括CommonJS规范的核心变量: exports、module.exports、require;</p>
<h3 id="exports-module-exports-require"><a href="#exports-module-exports-require" class="headerlink" title="exports module.exports require"></a>exports module.exports require</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  num, num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> a_data = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"><span class="comment">// a_data指向a.js的exports引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_data);</span><br><span class="line"><span class="comment">// &#123; num: 10, num2: 20, fn: [Function: fn] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需引入,</span></span><br><span class="line"><span class="keyword">const</span> &#123; num, num2, fn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num, num2, fn);</span><br><span class="line"><span class="comment">// 10 20 [Function: fn]</span></span><br></pre></td></tr></table></figure>

<p><strong>exports和module.exports指向同一个引用：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>所以，<code>a.js</code>文件的导入也可以是这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">num</span> = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num2</span> = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function fn&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是，如果在其之后加上<code>module.exports</code>语句，则会被覆盖（因为指向同一个引用）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">num</span> = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num2</span> = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function fn&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">num3</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; num, num2, fn, num3 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num, num2, fn, num3);</span><br><span class="line"><span class="comment">// undefined undefined undefined 10</span></span><br></pre></td></tr></table></figure>

<p>说明：exports是属于规范中的，module.exports属于Node的实现的。</p>
<p>CommonJS中是没有module.exportst的</p>
<p>但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是module;</p>
<p>所以在Node中真正用于导出的其实根本不是exports，而是module.exports;</p>
<p>因为module才是导出的真正实现者;</p>
<h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><p><strong>本质</strong>：引用赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num1</span> = num1</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">num1</span> = <span class="number">30</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> a_data = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_data);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a_data);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">// &#123; num1: 20 &#125;</span></span><br><span class="line"><span class="comment">// two second later</span></span><br><span class="line"><span class="comment">// &#123; num1: 30 &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// a_data和a.js的exports指向同一个引用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在b.js引入变量后，修改a_data的值，在a.js中使用</span></span><br><span class="line"><span class="comment">// 再次验证a_data和a.js的exports对象指向同一个引用</span></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num1</span> = num1</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>.<span class="property">num1</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> a_data = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_data);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  a_data.<span class="property">num1</span> = <span class="number">100</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// &#123; num1: 20 &#125;</span></span><br><span class="line"><span class="comment">// two second later</span></span><br><span class="line"><span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<h3 id="require查找细节"><a href="#require查找细节" class="headerlink" title="require查找细节"></a>require查找细节</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a_data = <span class="built_in">require</span>(<span class="string">&#x27;X&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>情况一：如果X是node的内置模块，则直接返回；</p>
<p>情况二：如果X是相对或者绝对路径：</p>
<p>第一步：将X当做一个文件在对应的目录下查找;</p>
<ol>
<li>如果有后缀名，按照后缀名的格式查找对应的</li>
<li>如果没有后缀名，会按照如下顺序:<ol>
<li>直接查找文件X</li>
<li>查找X.js文件</li>
<li>查找X.json文件</li>
<li>查找X.node文件</li>
</ol>
</li>
</ol>
<p>第二步：没有找到对应的文件，将X作为一个目录查找目录下面的index文件</p>
<ol>
<li>查找X&#x2F;index.js文件</li>
<li>查找X&#x2F;index.json文件</li>
<li>查找X&#x2F;index.node文件</li>
</ol>
<p>如果没找到，报错</p>
<p>情况三：不是路径，不是核心模块，则从node_modules相关的模块中package.json中定义的入口文件（<code>main属性</code>，如果没有指定，默认是index.js文件）中寻找。</p>
<p>如果没有，去上层目录的node_modules文件夹中寻找，会一直往上，一直到根目录都没有找到，报错。</p>
<h3 id="模块的加载过程"><a href="#模块的加载过程" class="headerlink" title="模块的加载过程"></a>模块的加载过程</h3><p>模块在被第一次引入时，模块中的js代码会被运行一次（<strong>即导入的文件按遇到require语句，发生阻塞</strong>）</p>
<p>模块被多次引入时，会缓存，最终只加载（运行)一次</p>
<ul>
<li>这是因为每个模块对象module都有一个属性:loaded。为false表示还没有加载，为true表示已经加载;</li>
</ul>
<h4 id="循环引入如何解决"><a href="#循环引入如何解决" class="headerlink" title="循环引入如何解决?"></a>循环引入如何解决?</h4><p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220713141851893.png" alt="循环引入图示"></p>
<p>Node的依赖引用采用的图遍历的深度优先算法</p>
<p>上图的引入顺序：main–&gt;a–&gt;d–&gt;c–&gt;b</p>
<h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><ul>
<li>变量的导入者可以修改导出者导出的变量（大忌）；</li>
<li>require引入是同步加载，即：在文件A引入文件B，文件B的所有代码（包括require，业务逻辑操作均会被执行一次）；若遇到一个文件存在大量的业务逻辑操作，该文件被其他文件引入，会造成阻塞。<ul>
<li>这也是浏览器不实现CommonJS的一个原因。</li>
</ul>
</li>
<li>虽然在webpack仍然可以使用CommonJS和ESModule进行开发，这是因为webpack将CommonJS进行了转化，变成浏览器可以执行的代码。</li>
</ul>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD（Asynchronous Module Definition）：采用异步加载模块</p>
<p>AMD规范早于CommonJS，现在已经不常用了。</p>
<p>AMD实现相关的库：require.js和curl.js</p>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD（Common Module Definition）</p>
<p>采用异步加载模块，继承了AMD的优点，也不常用了。</p>
<p>相关的库：SeaJS</p>
<h2 id="ESModule"><a href="#ESModule" class="headerlink" title="ESModule"></a>ESModule</h2><p>ES2015官方推出的模块化方案。</p>
<p>导入者不能修改导出者导出的变量</p>
<p>浏览器使用ESModule，需要给script标签加上<code>type</code>属性，同时需要开启本地服务（live server插件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./b.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line"><span class="comment">// 区分ES6对象的增强语法，此处不是</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  a,</span><br><span class="line">  b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="comment">// 浏览器是同ESModule,引入的文件必须加后缀名</span></span><br><span class="line"><span class="keyword">import</span> &#123; a, b &#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure>

<h3 id="导出起别名"><a href="#导出起别名" class="headerlink" title="导出起别名"></a>导出起别名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出时使用别名</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  a <span class="keyword">as</span> $a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; $a &#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="导入起别名"><a href="#导入起别名" class="headerlink" title="导入起别名"></a>导入起别名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入时使用别名</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">class</span> &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name, <span class="title class_">Person</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> a_name, <span class="title class_">Person</span> <span class="keyword">as</span> a_Person &#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_name, a_Person);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="整体导入"><a href="#整体导入" class="headerlink" title="整体导入"></a>整体导入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">class</span> &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name, <span class="title class_">Person</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 整体导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> a_data <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_data.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_data.<span class="property">Person</span>);</span><br></pre></td></tr></table></figure>

<p><strong>导出导入可以同时起别名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">class</span> &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name <span class="keyword">as</span> $name, <span class="title class_">Person</span> <span class="keyword">as</span> $Person</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; $name <span class="keyword">as</span> name, $Person <span class="keyword">as</span> <span class="title class_">Person</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>);</span><br></pre></td></tr></table></figure>

<h3 id="定义时导出"><a href="#定义时导出" class="headerlink" title="定义时导出"></a>定义时导出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此导出无法定义别名</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// export const name as $name = &#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; name, <span class="title class_">Person</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 但是可以导入时使用别名</span></span><br><span class="line"><span class="comment">// import &#123; name as a_name, Person as a_Person &#125; from &#x27;./a.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="title class_">Person</span>);</span><br></pre></td></tr></table></figure>

<h3 id="默认导出-default"><a href="#默认导出-default" class="headerlink" title="默认导出(default)"></a>默认导出(default)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="comment">// 导入的名称可自定义，且不带花括号</span></span><br><span class="line"><span class="keyword">import</span> a_data <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_data);</span><br></pre></td></tr></table></figure>

<p>注意：在一个文件（模块）中，只能有一个默认导出。</p>
<h3 id="import和export同时使用"><a href="#import和export同时使用" class="headerlink" title="import和export同时使用"></a>import和export同时使用</h3><p>新建统一的出口文件index.js </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; b &#125; <span class="keyword">from</span> <span class="string">&#x27;./b.js&#x27;</span></span><br><span class="line"><span class="comment">// export * from &#x27;./b.js&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他文件从index.js导入使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; b &#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="import函数"><a href="#import函数" class="headerlink" title="import函数"></a>import函数</h3><p>import和export只能在文件（模块）的顶层使用</p>
<p>原因：</p>
<ul>
<li>这是因为ES Module在被JS引擎解析时，就必须知道它的依赖关系;</li>
<li>由于这个时候js代码没有任何的运行，所以无法在进行类似于if判断中根据代码的执行情况;</li>
<li>甚至拼接路径的写法也是错误的：因为我们必须到运行时能确定path的值;</li>
</ul>
<p>如果想要在逻辑操作满足一定条件时再导入，可使用import函数，这个import函数返回一个promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;a_str&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">import</span>(<span class="string">&#x27;./a.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">a</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应用场景：VUE组件异步加载</p>
<h3 id="import-meta"><a href="#import-meta" class="headerlink" title="import meta"></a>import meta</h3><p>import.meta是一个给JavaScript模块暴露特定上下文的元数据属性的对象。它包含了这个模块的信息，比如说这个模块的URL;<br>在ES11 (ES2020）中新增的特性;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>);</span><br><span class="line"><span class="comment">// &#123;url: &#x27;http://127.0.0.1:5500/test/b.js&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ESModule的解析流程"><a href="#ESModule的解析流程" class="headerlink" title="ESModule的解析流程"></a>ESModule的解析流程</h2><ul>
<li>阶段一:构建(Construction)，根据地址查找js文件，并且下载，将其解析成模块记录(Module Record) ;</li>
<li>阶段二:实例化(Instantiation)，对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址。</li>
<li>阶段三:运行(Evaluation)，运行代码，计算值，并且将值填充到内存地址中;</li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220713213739985.png" alt="ESModule的解析流程"></p>
]]></content>
      <categories>
        <category>前端模块化</category>
        <category>CommonJS</category>
        <category>ESMoule</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>前端模块化</tag>
        <tag>ESModule</tag>
        <tag>CommonJS</tag>
      </tags>
  </entry>
  <entry>
    <title>经济学原理浅学（一）</title>
    <url>/2022/06/08/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E6%B5%85%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>经济学原理</tag>
        <tag>杂七杂八</tag>
        <tag>弹性</tag>
        <tag>弹性相关案例</tag>
      </tags>
  </entry>
  <entry>
    <title>pnpm学习笔记</title>
    <url>/2022/07/11/pnpm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="传统的包管理工具劣势"><a href="#传统的包管理工具劣势" class="headerlink" title="传统的包管理工具劣势"></a>传统的包管理工具劣势</h1><ul>
<li>当使用npm或Yarn或者cnpm时，如果有100个项目，并且所有项目都有一个相同的依赖包，那么，在硬盘上就需要保存100份该相同依赖包的副本，这些副本互为拷贝，修改各自项目三方包的源码不会相互影响（但是为什么要修改三方包的源码呢？没必要）；如果依赖过多，会导致项目较大，当本地存储的项目较多时，对于磁盘存在一定的压力。</li>
<li>传统的包管理工具创建的node_modules目录是扁平化的，即：所有三方包的依赖都被提升到node_modules根目录下（例如，webpack也依赖其他包，这些依赖会被提升到整个项目的node_modules文件夹下）；<ul>
<li>结果是：源码可以访问本不属于当前项目所设定的依赖包（项目的package.json）</li>
</ul>
</li>
</ul>
<h1 id="硬链接-amp-amp-软链接"><a href="#硬链接-amp-amp-软链接" class="headerlink" title="硬链接&amp;&amp;软链接"></a>硬链接&amp;&amp;软链接</h1><ul>
<li><font color=red>硬链接（hard link）：</font><ul>
<li>是电脑文件系统中的多个文件平等地共享同一个文件存储单元;</li>
<li>删除一个文件名字后，还可以用其它名字继续访问该文件;</li>
<li>硬链接不能操作目录，只能操作文件。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">window</span>:</span><br><span class="line">mklink /H 新建的硬链接文件名 源文件名 </span><br><span class="line"><span class="attr">macOS</span>:</span><br><span class="line">ln 源文件 新建的硬链接文件</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">mklink /H test.<span class="property">js</span> test_hard.<span class="property">js</span></span><br><span class="line">test.<span class="property">js</span>为原文件，创建一个test.<span class="property">js</span>的硬链接文件test_hard.<span class="property">js</span>,修改任意一个文件的内容，另一个文件也会被修改。</span><br></pre></td></tr></table></figure>

<p>硬链接图示：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220711224946660.png" alt="硬链接图示"></p>
<ul>
<li><font color=red>软链接（soft link、Symbolic link）:</font>&gt;可理解为<font color=red>快捷方式</font>&gt;<ul>
<li>符号链接是一类特殊的文件;</li>
<li>其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用;</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">window</span>: </span><br><span class="line">mklink 新建的软连接文件名 源文件名</span><br><span class="line"><span class="attr">macos</span>: </span><br><span class="line">ln -s 源文件名 新建的软连接文件名</span><br></pre></td></tr></table></figure>

<p>软链接图示：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220711225855829.png" alt="软链接图示"></p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220711225943108.png" alt="软链接图示"></p>
<p>软硬链接图示：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%9B%BE%E7%A4%BA.png" alt="软硬链接图示"></p>
<p>说明：如果源文件被删除，使用软连接创建的文件（名）将不能够访问磁盘的真实文件；硬链接创建的文件（名）仍然能够访问。</p>
<p>即上图中，软连接删除了OriginalFile，softLink的引用将断开；硬链接删除OriginalFile，使用HardLink仍然能够访问磁盘的真实文件。</p>
<h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p>pnpm：performant npm (高性能的包管理器)</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>pnpm相较于传统的包管理工具的优势：</p>
<ol>
<li><p>如果你对同一依赖包使用相同的版本，那么磁盘上只有这个依赖包的一份文件;</p>
<p>如果你对同一依赖包需要使用不同的版本，则仅有版本之间不同的文件会被存储起来;</p>
<p>所有文件都保存在硬盘上的统一的位置:</p>
<ul>
<li><p>当安装软件包时，其包含的所有文件都会硬链接到此位置，而不会占用额外的硬盘空间;</p>
</li>
<li><p>这让你可以在项目之间方便地共享相同版本的依赖包;</p>
</li>
</ul>
</li>
<li><p>pnpm采用非扁平化的安装方式：</p>
<ul>
<li>带来另外一个问题：多以包依赖同一个包，这个包会被安装多次，但是pnpm也考虑到了这个问题。</li>
</ul>
</li>
</ol>
<p>目录结构： </p>
<p>某个项目依赖<code>axios</code>，在使用pnpm管理依赖的前提下，node_modules的目录结构为：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220712120439437.png" alt="node_modules的目录结构"></p>
<p>说明：</p>
<ul>
<li>项目的node_modules文件夹下，仅有axios依赖（本项目仅仅依赖axios库，就避免了使用commonjs或者esmodule引入依赖时，不可以访问本不属于当前项目所设定的依赖包）；</li>
<li>node_modules的axios属于软链接，真正的文件位于<code>.pnpm</code>文件夹下，在<code>.pnpm</code>之下，有一个<a href="mailto:&#x61;&#x78;&#x69;&#x6f;&#x73;&#x40;&#48;&#46;&#50;&#x37;&#x2e;&#x32;">&#x61;&#x78;&#x69;&#x6f;&#x73;&#x40;&#48;&#46;&#50;&#x37;&#x2e;&#x32;</a>文件，其下有一个node_modules文件夹，包含了自身的源码（硬链接）以及axios所需要的其他依赖的软链接；</li>
<li>在<code>axios@0.27.2/node_modules</code>目录之下，有<code>axios</code>的其他依赖软链接，其中，<code>form-data</code>的目录结构和<code>axios@0.27.2/node_modules</code>类似</li>
</ul>
<h2 id="pnpm的存储store"><a href="#pnpm的存储store" class="headerlink" title="pnpm的存储store"></a>pnpm的存储store</h2><ul>
<li><p>在pnpm7.0之前，统一的存储位置是~&#x2F;.pnpm-score中的;</p>
</li>
<li><p>在pnpm7.0之后，统一的存储位置进行了更改: <code>&lt;pnpm home directory&gt; /store</code></p>
<ul>
<li><p>在Linux上，默认是<code>~/.local/share/pnpm/store</code></p>
</li>
<li><p>在 Windows 上: <code>%LOCALAPPDATA%/pnpm/store</code></p>
</li>
<li><p>在macOS 上: <code>~/Library/pnpm/store</code></p>
</li>
<li><p>也可以使用pnpm的命令</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pnpm store path</span><br><span class="line"><span class="comment">// 在不同的目录使用pnpm store path命令，结果可能不同，这是因为不同的磁盘之间不能创建相关的硬链接（比如固态和机械，不同的磁盘之间）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220712122028258.png" alt="windows下的存储目录"></p>
<center><font center>window下全局pnpm依赖所在的store</font></center>

<p>pnpm的store存储了当前操作系统所有依赖的硬链接，在有新项目存在相同的依赖时，pnpm会根据store存储的相关信息，根据相关算法对新项目的依赖创建硬链接</p>
<h2 id="pnpm的裁剪"><a href="#pnpm的裁剪" class="headerlink" title="pnpm的裁剪"></a>pnpm的裁剪</h2><p>pnpm的存储方式带来了另外一个问题：</p>
<p>所有的项目的依赖的所有文件在<code>.pnpm-store</code>都存在一份硬链接，随着创建的项目越来越多，或者本地项目的删除，同时随着依赖的逐渐升级，早期版本的依赖已经不再使用，<strong>但是这些文件的硬链接仍然存在</strong>，会导致<code>.pnpm-store</code>越来越大，虽然相较于传统的npm等工具，其占用的空间大大减少，但是对于磁盘仍然会有一定的存储压力（虽然情况已经好很多了）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pnpm store prune</span><br><span class="line"><span class="comment">// 从store中删除当前未被引用的包来释放store的空间</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端包管理工具</category>
        <category>pnpm</category>
        <category>npm</category>
        <category>cnpm</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>前端包管理工具</tag>
        <tag>pnpm</tag>
        <tag>cnpm</tag>
        <tag>npm</tag>
        <tag>yarn</tag>
        <tag>操作系统</tag>
        <tag>coderwhy</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器_async_await</title>
    <url>/2022/04/17/%E7%94%9F%E6%88%90%E5%99%A8-async-await/</url>
    <content><![CDATA[<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>生成器是一种<strong>特殊的迭代器</strong>;是ES6中新增的一种函数控制、使用的方案，它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等。</p>
<h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><p>js的使用的函数,函数的终止条件通常是<strong>返回值</strong>或者<strong>抛出了异常</strong></p>
<p>生成器函数也是一个函数，但是和普通函数有一定的区别：</p>
<ul>
<li>语法上：在function后加“*”；</li>
<li>生成器函数可以<strong>使用“yield”关键字来控制函数的执行流程</strong>；</li>
<li><strong>生成器函数返回一个生成器</strong>；</li>
<li>单独的函数调用不会有任何结果，需要使用变量来接收函数返回的生成器。</li>
</ul>
<p><strong>生成器一般和生成器函数一起使用</strong>：</p>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 第一次next()时，返回&#123;value: 1, done: false&#125;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 此处的n为第二次调用next传入的参数，可当作第一次yield的返回值</span></span><br><span class="line">  <span class="comment">// 第二次next()时，返回&#123;value: 2, done: false&#125;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="comment">// 第三次next()时，返回&#123;value: 3, done: false&#125;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// 第四次next()时，返回&#123;value: &#x27;foo&#x27;, done: true&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<h3 id="next方法的传值以及yield的返回值"><a href="#next方法的传值以及yield的返回值" class="headerlink" title="next方法的传值以及yield的返回值"></a>next方法的传值以及yield的返回值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  <span class="comment">// 想要接收函数的参数，只需在函数调用时传入即可，而不是在第一次调用next时传入、  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  <span class="keyword">const</span> count1 = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一次yield的返回值，由第二次next传入的参数决定&#x27;</span>, count1);</span><br><span class="line">  <span class="comment">// 此处的count1为第二次调用next传入的参数，可当作第一次yield的返回值</span></span><br><span class="line">  <span class="comment">// next传入的参数会被当做上一次yield的返回值(即第n次yield的参数是第n-1次yield函数的返回值)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> * count1);</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">const</span> count3 = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三次yiled的返回值，由第四次next传入的参数决定&#x27;</span>, count3);</span><br><span class="line">  <span class="comment">// 第四次next()时，返回&#123;value: &#x27;foo&#x27;, done: true&#125;</span></span><br><span class="line">  <span class="comment">// 因为函数遇到了return关键字，函数执行完毕</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">foo</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">20</span>));</span><br></pre></td></tr></table></figure>

<p>注意：第一次调用next方法很少传入参数</p>
<h3 id="生成器其他方法"><a href="#生成器其他方法" class="headerlink" title="生成器其他方法"></a>生成器其他方法</h3><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count1 = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count1);</span><br><span class="line">  <span class="keyword">const</span> count2 = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> count2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">foo</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 意味着在第一个yield和第二个yield之间加上return语句，提前终止生成器函数代码的执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">return</span>(<span class="string">&#x27;return&#x27;</span>));</span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;return&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count1 = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count1);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> count1;</span><br><span class="line">  <span class="keyword">const</span> count2 = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> count2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">foo</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">return</span>(<span class="string">&#x27;return&#x27;</span>));</span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;return&#x27;, done: true &#125;</span></span><br><span class="line"><span class="comment">// 之后再调用next方法均返回</span></span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count1 = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count1);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;错误捕获到之后继续执行&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;代码继续执行&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> count2 = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> count2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">throw</span>(<span class="string">&#x27;iterator throw&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// error iterator throw</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;错误捕获到之后继续执行&#x27;, done: false &#125;</span></span><br><span class="line"><span class="comment">// 代码继续执行</span></span><br><span class="line"><span class="comment">// &#123; value: 2, done: false &#125; </span></span><br></pre></td></tr></table></figure>

<h2 id="生成器替代迭代器"><a href="#生成器替代迭代器" class="headerlink" title="生成器替代迭代器"></a>生成器替代迭代器</h2><h3 id="使用循环来yield数据"><a href="#使用循环来yield数据" class="headerlink" title="使用循环来yield数据"></a>使用循环来yield数据</h3><p>迭代器的目的是返回一个带有next方法的对象</p>
<p>但是，生成器也是一种迭代器；我们可以使用生成器函数直接返回一个生成器，来调用next方法</p>
<p>比如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> index &lt; arr.<span class="property">length</span> ?</span><br><span class="line">        &#123; <span class="attr">value</span>: arr[index++], <span class="attr">done</span>: <span class="literal">false</span> &#125; :</span><br><span class="line">        &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createIterator</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 可修改为</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">createIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">yield</span> item</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">createIterator</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<h3 id="yield"><a href="#yield" class="headerlink" title="yield*"></a>yield*</h3><p>事实上我们也可以使用给yield*来生产一个可迭代对象；</p>
<p>这个时候相当于<strong>是yield的语法糖</strong>，只不过会一次迭代这个可迭代对象，每次迭代其中一个值。</p>
<p>(yield* 之后要加上一个可迭代对象)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">createIterator</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span>* arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">createIterator</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); </span><br></pre></td></tr></table></figure>

<h3 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个可生成一个范围内数字的迭代器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRangeIterator</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = start;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: index++ &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createRangeIterator</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用yiled修改</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">createRangeIterator</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = start;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; end) &#123;</span><br><span class="line">    <span class="keyword">yield</span> index++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createRangeIterator</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义对象的可迭代性</span></span><br><span class="line"><span class="comment">// 新建教室类,该教室的学生可遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address, name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = address;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pushStudent</span>(<span class="params">student</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">push</span>(student);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Room.prototype[Symbol.iterator] = function() &#123;&#125;</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 注意使用箭头函数</span></span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">students</span>[index++]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用yield修改[Symbol.iterator]方法</span></span><br><span class="line">*[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">this</span>.<span class="property">students</span>[index++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 或者直接</span></span><br><span class="line">  <span class="comment">// yield* this.students</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> room = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&#x27;行远楼A105&#x27;</span>, <span class="string">&#x27;软件工程教室&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;hrm&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;xcl&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;dmy&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;gq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = room[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// &#123; done: false, value: &#x27;hrm&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; done: false, value: &#x27;xcl&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; done: false, value: &#x27;dmy&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; done: false, value: &#x27;gq&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> student <span class="keyword">of</span> room) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生成器向async-await的过渡"><a href="#生成器向async-await的过渡" class="headerlink" title="生成器向async_await的过渡"></a>生成器向async_await的过渡</h1><h2 id="异步代码的处理方案"><a href="#异步代码的处理方案" class="headerlink" title="异步代码的处理方案"></a>异步代码的处理方案</h2><p>现有一个场景，我们有一个网络请求函数，需要用这个网路函数发送三次网络请求，第二次的请求参数是第一次请求的结果</p>
<h3 id="原始方案（回调函数）"><a href="#原始方案（回调函数）" class="headerlink" title="原始方案（回调函数）"></a>原始方案（回调函数）</h3> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params, successCallback, failCallback</span>) &#123;</span><br><span class="line">  <span class="comment">// setTimeout模拟网络请求</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 成功的回调，将传入的参数 + 1</span></span><br><span class="line">    <span class="title function_">successCallback</span>(params + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们暂定网络请求均成功,此处不传失败回调</span></span><br><span class="line"><span class="title function_">requestData</span>(<span class="number">1</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">requestData</span>(res, <span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">requestData</span>(res2, <span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将函数改进为返回一个promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(params + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="promise-then"><a href="#promise-then" class="headerlink" title="promise.then"></a>promise.then</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">requestData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">requestData</span>(res).<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">requestData</span>(res2).<span class="title function_">then</span>(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 看上去也是回调地狱，没有什么改进哈哈</span></span><br></pre></td></tr></table></figure>

<h4 id="promise-then返回新的promise"><a href="#promise-then返回新的promise" class="headerlink" title="promise.then返回新的promise"></a>promise.then返回新的promise</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">requestData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">requestData</span>(res)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">requestData</span>(res2)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="promise-generator"><a href="#promise-generator" class="headerlink" title="promise + generator"></a>promise + generator</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(params + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> <span class="title function_">requestData</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res);</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">requestData</span>(res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到生成器</span></span><br><span class="line"><span class="keyword">const</span> genetator = <span class="title function_">getData</span>();</span><br><span class="line"><span class="comment">// 第一次调用next方法，拿到第一次yield之后的值：requestData(1)（一个promise），并且把该值赋值给value（value: promise）</span></span><br><span class="line">genetator.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 第二次调用next方法，next方法传入的参数是第一次yield requestData(1)的返回值，即2(res)</span></span><br><span class="line">  <span class="comment">// 第二次调用next方法，拿到第二次yield 之后的值：requestData(res)的返回值(一个promise)，并且该值赋值给value（value: promise）</span></span><br><span class="line">  genetator.<span class="title function_">next</span>(res).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第三次调用next方法，next方法传入的参数是第二次yield requestData(res)的返回值，即3</span></span><br><span class="line">    <span class="comment">// 第三次调用next方法，拿到第三次yield requestData(res2)的返回值(一个promise)，并且把该值赋值给value（value: promise）</span></span><br><span class="line">    <span class="comment">// 最后的promise.then拿到最终的执行结果</span></span><br><span class="line">    genetator.<span class="title function_">next</span>(res2).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 有点绕.....</span></span><br></pre></td></tr></table></figure>

<h5 id="promise-generator函数自动化执行封装"><a href="#promise-generator函数自动化执行封装" class="headerlink" title="promise+generator函数自动化执行封装"></a>promise+generator函数自动化执行封装</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(params + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> <span class="title function_">requestData</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res);</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res2);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">execGenerator</span>(<span class="params">genetatorFn</span>) &#123;</span><br><span class="line">  <span class="comment">// 拿到生成器（迭代器 ）</span></span><br><span class="line">  <span class="keyword">let</span> generator = <span class="title function_">genetatorFn</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">exec</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = generator.<span class="title function_">next</span>(res);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">done</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">exec</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">exec</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">execGenerator</span>(getData);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>参看npm依赖</strong>：<strong>co</strong></p>
<p><font color=blue><strong>开发者:TJ</strong></font>（TJ  Holowaychuk）</p>
<p>该作者对前端的贡献非常大，例如：</p>
<ul>
<li><p>npm三方依赖</p>
<ul>
<li>n(node版本管理工具)</li>
<li>commander(vue-cli中使用)</li>
</ul>
</li>
<li><p>express</p>
</li>
<li><p>koa（egg是基于koa的）</p>
</li>
</ul>
<h5 id="co的使用"><a href="#co的使用" class="headerlink" title="co的使用"></a>co的使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">&#x27;co&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(params + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> <span class="title function_">requestData</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res);</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res2);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">  <span class="keyword">return</span> res3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">co</span>(getData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="async-await"><a href="#async-await" class="headerlink" title="async_await"></a>async_await</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reslove</span>(params + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> <span class="title function_">requestData</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> res2 = <span class="keyword">await</span> <span class="title function_">requestData</span>(res1);</span><br><span class="line">  <span class="keyword">let</span> res3 = <span class="keyword">await</span> <span class="title function_">requestData</span>(res2);</span><br><span class="line">  <span class="keyword">return</span> res3</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="async-await-1"><a href="#async-await-1" class="headerlink" title="async_await"></a>async_await</h1><h2 id="async："><a href="#async：" class="headerlink" title="async："></a>async：</h2><p>异步，用来声明一个异步函数，<strong>异步函数的返回值一定是一个promise</strong></p>
<p>这个promise的then方法调用时机：异步函数返回了值</p>
<p>sync：与async对立，表示同步</p>
<h3 id="异步函数的返回值"><a href="#异步函数的返回值" class="headerlink" title="异步函数的返回值"></a>异步函数的返回值</h3><h4 id="返回一个普通值"><a href="#返回一个普通值" class="headerlink" title="返回一个普通值"></a>返回一个普通值</h4><p>js会将返回的普通值用prosmie进行包裹</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// res的值就是return的值</span></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="返回一个实现了then方法的对象"><a href="#返回一个实现了then方法的对象" class="headerlink" title="返回一个实现了then方法的对象"></a>返回一个实现了then方法的对象</h4><p>如果这个返回了一个thenable对象(即该对象实现了then方法)，promise.then方法的相关回调由该对象的then方法决定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;obj then method resolve&#x27;</span>);</span><br><span class="line">      <span class="comment">// reject(&#x27;obj then method reject&#x27;);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="返回一个新的promise"><a href="#返回一个新的promise" class="headerlink" title="返回一个新的promise"></a>返回一个新的promise</h4><p>返回一个新的promise，会进行状态移交，会根据返回的新的promise进行相关回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;new promise resolve&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="async函数抛出异常"><a href="#async函数抛出异常" class="headerlink" title="async函数抛出异常"></a>async函数抛出异常</h3><p>异步函数抛出的异常会被作为返回的prosmise的err值，用catch、或者用then的第二个回调来捕获该错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then的第二个回调捕获&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch捕获&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>在异步函数内部可以使用await关键字</p>
<h3 id="await之后跟表达式（基本使用）"><a href="#await之后跟表达式（基本使用）" class="headerlink" title="await之后跟表达式（基本使用）"></a>await之后跟表达式（基本使用）</h3> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> <span class="title function_">foo</span>();</span><br><span class="line">  <span class="keyword">let</span> res2 = <span class="keyword">await</span> <span class="title function_">foo</span>();</span><br><span class="line">  <span class="comment">// 在得到res1,res2之前，之后的代码不会执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拿到res1,res2的值&#x27;</span>, res1, res2);</span><br><span class="line">  <span class="keyword">return</span> [res1, res2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>实际上，上述的getData函数修改为普通函数时，是这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>([res1, res2])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async配饰await的使用，使得异步代码看起来时同步代码的样子，实则是异步代码的一种语法糖</p>
<h3 id="await跟新的promise"><a href="#await跟新的promise" class="headerlink" title="await跟新的promise"></a>await跟新的promise</h3><p>这种情况适用于await之后跟表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;await new promise resolve&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// &#x27;await new promise resolve&#x27; </span></span><br></pre></td></tr></table></figure>

<h3 id="await之后跟普通值"><a href="#await之后跟普通值" class="headerlink" title="await之后跟普通值"></a>await之后跟普通值</h3><p>如果await之后跟上是一个普通值，会立即返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>await之后跟thenable对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> &#123;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;await obj then resolve&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// await obj then resolve</span></span><br></pre></td></tr></table></figure>

<h3 id="await：reject值"><a href="#await：reject值" class="headerlink" title="await：reject值"></a>await：reject值</h3><p>以上情况，均resolve了值，如果reject之后，会有什么情况呢？</p>
<p>此时需要使用catch来进行捕获</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> <span class="title function_">requestData</span>();</span><br><span class="line">  <span class="keyword">return</span> res1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">requestData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>js底层原理</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>迭代器</tag>
        <tag>生成器</tag>
        <tag>iterator</tag>
        <tag>generator</tag>
        <tag>await</tag>
        <tag>async</tag>
      </tags>
  </entry>
  <entry>
    <title>经济学原理浅学（三）</title>
    <url>/2022/06/09/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E6%B5%85%E5%AD%A6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>需求曲线描述了消费者的购买意愿</p>
<p><strong>消费者剩余：</strong> <strong>需求线以下</strong>和<strong>价格以上</strong>的面积衡量市场的消费者剩余。</p>
<p>价格降低会导致消费者剩余<strong>增加</strong></p>
<p><strong>生产者剩余：</strong>衡量卖者参与市场的收益，<strong>供给线以上</strong>和<strong>价格以下</strong>的面接衡量市场的生产者剩余。</p>
<h1 id="市场效率"><a href="#市场效率" class="headerlink" title="市场效率"></a>市场效率</h1><p>消费者剩余 &#x3D; 买者评价 - 买者支付的量</p>
<p>买者评价指的是买者认为该商品值多少钱</p>
<p>生产者剩余 &#x3D; 卖者得到的量（值等于买者支付的量） - 卖者的生产成本</p>
<p>总剩余（<strong>市场效率</strong>）：消费者剩余+生产者剩余 或者 卖者意愿 - 卖者的生产成本</p>
<p>由此可知，效率高等同于社会总剩余大</p>
<p>当资源配置使总剩余最大化时，我们说，这种配置达到市场效率。 </p>
<p>假设没有外部干预的情况下，完全的竞争市场最终产生的市场效率最高。</p>
<h1 id="税收"><a href="#税收" class="headerlink" title="税收"></a>税收</h1><p>政府使用收税的方式为公共项目筹款</p>
<h2 id="税收的负担问题"><a href="#税收的负担问题" class="headerlink" title="税收的负担问题"></a>税收的负担问题</h2><p>谁来承担?</p>
<p><strong>税收改变了市场均衡,税收<font color="red">总使得</font>买者付出更多而卖者得到更少.</strong></p>
<p>即:对卖者征税和对买者征税的结果是相同的,两者分摊税收负担</p>
<p>唯一的差别是谁把钱交给政府</p>
<h3 id="向买者征税的结果"><a href="#向买者征税的结果" class="headerlink" title="向买者征税的结果"></a>向买者征税的结果</h3><p>某件产品3元,但是需要征收五角的税,那么消费者就会倾向于价格更低的产品</p>
<p><strong>实际上,税前价格为2.8,税后价格为3.3,即消费者支付了3.3,商家得到了2.8,多出的五角(消费者)上交政府</strong></p>
<p>此时,供给下降,需求减小</p>
<h3 id="向卖者征税的结果"><a href="#向卖者征税的结果" class="headerlink" title="向卖者征税的结果"></a>向卖者征税的结果</h3><p>某件产品3元,但是需要征收五角的税,那么生产者就会倾向于价格更高的产品</p>
<p><strong>实际上,税后价格为3.3,税前价格为2.8,即消费者支付了3.3,商家得到了2.8,多出的五角(生产者)上交政府</strong></p>
<p>此时,供给下降,需求减小</p>
<h2 id="税收承担者-谁的比例更大"><a href="#税收承担者-谁的比例更大" class="headerlink" title="税收承担者,谁的比例更大?"></a>税收承担者,谁的比例更大?</h2><p>既然税收和买着和卖者无关,那谁承担的更多?(比例)</p>
<p><strong>答案取决于需求弹性和供给弹性</strong></p>
<p>弹性:对价格变化很敏感,弹性大;反之弹性小.(价格的变化影响供给量或者需求量)</p>
<p>当供给比需求更有弹性时,税收负担者更多由消费者承担,更少的由生产者承担</p>
<p>当需求比供给更有弹性时,税收负担者更多由生产者承担,更少的由消费者承担</p>
<p>结论:收负担更多的落在缺乏弹性(供给或者需求)的市场.</p>
<p><strong>这是为什么呢?</strong></p>
<p>弹健是衡量当条件变得不利时，买者或卖者离开市场的意愿。</p>
<p>当弹性较低时,生产者或者消费者不能轻易撤离市场(即价格变化较大时,还必须生产或者消费),即被”栓”在市场了,承担的税比例就大</p>
<p>而对于弹性较大时,价格变化大(可以停止生产或购买,减少商品的供给或者购买量),可以撤离市场,承担的税比例就少</p>
<p><strong>不能轻而易开市场的一方承担税收负担。</strong></p>
<p>分析表明，税收对于买卖双方的成本超过了政府的税收收入（效率损失）</p>
<h2 id="税收影响"><a href="#税收影响" class="headerlink" title="税收影响"></a>税收影响</h2><p><strong>税收抑制市场活动</strong></p>
<p><strong>一个商品被征税,销售量减小</strong></p>
<p><strong>买卖双方均承受税收负担</strong></p>
<p><strong>效率的损失，市场规模减小</strong></p>
<ul>
<li><p>有了税收之后，卖者的收益减少（成本增加），买着买入的价格变大，<strong>会有一部分卖者不再生产，一部分买者不再购买</strong>（称为<strong>无谓损失</strong>），以此来规避税收，导致市场效率降低；</p>
<ul>
<li>税收引起的无谓损失是因为他使卖者和买者不能实现某些贸易的好处（消费者的消费意愿大于了卖者的成本，但是这种贸易无法实现，因为有税收）。 <ul>
<li>例子1：中国的手机普及率高，因为中国手机所交的税在国际上相对较低；</li>
<li>例子2：某个国家的劳动税率越高，劳动者的工作时间越低（法国人一周只工作35小时，很多法国人一周只工作4天或者5天）。</li>
</ul>
</li>
</ul>
</li>
<li><p>同时，政府有了税收之后，消费者剩余和生产者剩余均降低。</p>
</li>
</ul>
<p>税收扭曲</p>
<ul>
<li>政府对于市场征收一定的税后，希望的结果是征收多少得到多少，但是会发现有损失，得到的比征收的少。</li>
</ul>
<h3 id="无谓损失的决定因素"><a href="#无谓损失的决定因素" class="headerlink" title="无谓损失的决定因素"></a>无谓损失的决定因素</h3><h4 id="税收本身的大小"><a href="#税收本身的大小" class="headerlink" title="税收本身的大小"></a>税收本身的大小</h4><p>征税的规模越大，无谓损失越大；反之，市场没有无谓损失。</p>
<ul>
<li>税收的规模适度增加，会导致无谓损失增加，税收也增加；</li>
<li>税收的规模过大，无谓损失越大，税收可能会减小；极端情况下，税收会变为0（理解为没有人愿意劳动了）。<ul>
<li>税率和税收的关系不是单调的；税率足够大之后，继续增加收入，税收收入会下降；</li>
<li>但是无谓损失是单调的（解近平方的关系），随着税收规模的增加，无谓损失也会越来越多。</li>
</ul>
</li>
</ul>
<p>建议：收很多小规模的税，这样每个商品的无谓损失维持在一个相对较小的水平。</p>
<h4 id="跟弹性有关"><a href="#跟弹性有关" class="headerlink" title="跟弹性有关"></a>跟弹性有关</h4><p>取决于供给和需求的价格弹性（供给和需求对于价格的反应&#x2F;敏感程度）：弹性越小，无谓损失越小；</p>
<h1 id="国际贸易"><a href="#国际贸易" class="headerlink" title="国际贸易"></a>国际贸易</h1><h2 id="比较优势"><a href="#比较优势" class="headerlink" title="比较优势"></a>比较优势</h2><p>按照比较优势的原理，某个国家不可能是某种商品的出口国和进口国，对于同一件商品来讲，如果某一个商品该国具有比较优势，那么则会进行出口，否则进行进口。</p>
<h2 id="世界价格"><a href="#世界价格" class="headerlink" title="世界价格"></a>世界价格</h2><p>如果某种的商品低于国际价格，则会选择出口；某种商品的价格高于国际价格，则会选择进口。</p>
<p>（价格在此处也间接反应了比较优势）</p>
<ul>
<li>如果某件商品的价格低于国际价格，那么会选择出口<ul>
<li>一方面，商品的供给价格会提高，供给量上升</li>
<li>国内的需求会降低</li>
<li>两者之间的差会去进行国际贸易</li>
<li>消费者剩余降低，生产者剩余增加（增加的部分包括消费者剩余减少的部分以及在对外贸易商品的生产者剩余）</li>
</ul>
</li>
<li>总的来看，贸易使得社会收益（生产者剩余增加，增加的部分大于消费者剩余减小的部门），但是出口损害了消费者。</li>
<li>同理，对于进口，消费者受益，生产者受损，社会也是收益。</li>
</ul>
<h2 id="关税"><a href="#关税" class="headerlink" title="关税"></a>关税</h2><p>关税一般来自进口</p>
<p>关税使得进口物品的价格提高到世界价格之上。</p>
<p>对于生产者有一定好处：国内同样商品的价格如果和世界价格相等，那么可以提高价格到进口商品征收关税之后的价格。</p>
<h3 id="关税的影响"><a href="#关税的影响" class="headerlink" title="关税的影响"></a>关税的影响</h3><ul>
<li>消费者剩余降低</li>
<li>生产者甚于增加（消费者剩余降低的一部分）</li>
<li>政府获得了一定的税收</li>
<li>存在一定的无谓损失（一部分是因为加了税之后减小的消费者剩余，还有一部分是没有让成本最低的生产者（国际上的生产者）来生产造成的效率损失）</li>
</ul>
<h2 id="进口配（限）额"><a href="#进口配（限）额" class="headerlink" title="进口配（限）额"></a>进口配（限）额</h2><p>进口配额是对进口数量的限制。</p>
<p>如果某国商品的价格很低，就导致其出口量很大，其他国家要是都进口，则会对本国的产品产生影响，这是，进口国会对进口产品进行进口配额。</p>
<p>这些进口配额分配给一些厂家，这些厂家就会获得进口许可证收入，替代政府成为了进口配额的受益者。</p>
<h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><p>进口配额会引起更大的无谓损失（比如分配进口许可证包含诸如游说政府这类的活动）</p>
<p>通常认为关税比进口配额好，因为有些利益各方会争夺这些进口配额；而关税实实在在都给了政府。</p>
<h2 id="国际贸易的其他好处"><a href="#国际贸易的其他好处" class="headerlink" title="国际贸易的其他好处"></a>国际贸易的其他好处</h2><ul>
<li>增加物品的多样性；</li>
<li>通过规模经济降低成本；<ul>
<li>国家向世界市场开放后，单位成本可以下降；</li>
</ul>
</li>
<li>增加竞争；<ul>
<li>激励国内企业提高质量；</li>
<li>创造了工作岗位（在企业擅长的方向）。</li>
</ul>
</li>
<li>加强思想交流。</li>
</ul>
]]></content>
      <categories>
        <category>经济学</category>
      </categories>
      <tags>
        <tag>经济学原理</tag>
        <tag>市场效率</tag>
        <tag>税收</tag>
        <tag>税收的代价</tag>
        <tag>国际贸易</tag>
      </tags>
  </entry>
  <entry>
    <title>进程_线程_js事件循环</title>
    <url>/2022/07/20/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程（process）"><a href="#进程（process）" class="headerlink" title="进程（process）"></a>进程（process）</h2><p>计算机已经运行的程序，是操作系统管理程序的一种方式；我们可以认为：启动一个程序，就会启动一个或者多个进程。</p>
<h2 id="线程（thread）"><a href="#线程（thread）" class="headerlink" title="线程（thread）"></a>线程（thread）</h2><p>操作系统能够运行运算调度的最小单位，通常情况下它被包含在进程中（进程是线程的容器）；同样，我们可以认为：每一个进程，都会至少启动一个线程来执行程序中的代码，这个线程被称为主线程。</p>
<p>当进程中的线程获取到<strong>时间片</strong>时，就可以快速执行我们编写的代码。</p>
<h1 id="js线程"><a href="#js线程" class="headerlink" title="js线程"></a>js线程</h1><p>JavaScript是<strong>单线程</strong>的，但是JavaScript的线程应该有自己的容器进程︰浏览器或者Node。</p>
<ul>
<li>目前多数的浏览器其实都是多进程的，<strong>当我们打开一个tab页面时就会开启一个新的进程</strong>，<ul>
<li>如果浏览器为单进程，一个页面卡死而造成所有页面无法响应，整个浏览器需要强制退出;</li>
</ul>
</li>
<li>每个进程中又有很多的线程，其中包括执行JavaScript代码的线程;<ul>
<li>如果当前js线程时耗时操作，就会造成代码阻塞。</li>
<li>解决方法：<ul>
<li>浏览器的每个进程是多线程的，那么其他线程可以来完成这个耗时的操作;比如<strong>网络请求、定时器</strong>，我们只需要在特性的时候执行应该有的回调即可。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p><strong>在浏览器环境下，js单线程属于浏览器进程；在Node环境下，js单线程属于Node进程。</strong></p>
<p>js本身是单线程的，意味着js不适合做耗时操作，否则会导致程序阻塞；</p>
<p>那么，耗时操作就交给浏览器或者Node创建的其他线程来完成，并将处理结果以回调函数的形式，放入浏览器或者Node维护的事件队列中，js在合适的时机来执行这些回调函数；</p>
<p>js在执行回调函数时，也有可能会遇见耗时操作，同理，这些耗时操作一就会被加入到事件队列中已在合适的时机被js执行。</p>
<h2 id="宏任务-amp-amp-微任务"><a href="#宏任务-amp-amp-微任务" class="headerlink" title="宏任务&amp;&amp;微任务"></a>宏任务&amp;&amp;微任务</h2><h3 id="宏任务（macrotask）"><a href="#宏任务（macrotask）" class="headerlink" title="宏任务（macrotask）"></a>宏任务（macrotask）</h3><p>浏览器的宏任务：ajax回调、定时器、DOM事件回调、UI Rendering（UI渲染完之后的回调）；</p>
<p>Node的宏任务：setTimeout、setInterval、IO事件、setImmediate、close事件。</p>
<h3 id="微任务（microtask）"><a href="#微任务（microtask）" class="headerlink" title="微任务（microtask）"></a>微任务（microtask）</h3><p>浏览器的微任务：queueMicrotask的回调、promise.then的回调、MutationObserver的API；</p>
<p>Node的微任务：Promise的then回调、process.nextTick的回调、queueMicrotask 的回调。</p>
<p>但是，Node中不简单是一个宏任务和微任务队列，</p>
<p>微任务队列：</p>
<ul>
<li>nextTick queue：process.nextTick	</li>
<li>other queue：Promise的then回调，queueMicrotask</li>
</ul>
<p>宏任务队列：</p>
<ul>
<li>timer queue : setTimeout、setInterval ;</li>
<li>poll queue : IO事件;</li>
<li>check queue : setImmediate ;</li>
<li>close queue : close事件;</li>
</ul>
<p>Node的宏任务和微任务的执行顺序：nextTick queue、other queue、timer queue、poll queue、check queue、close queue  </p>
<h3 id="总的执行过程"><a href="#总的执行过程" class="headerlink" title="总的执行过程"></a>总的执行过程</h3><p>注意：在执行宏任务之前，需要确保问任务队列被清空；new Promise是同步代码。</p>
<ol>
<li>首先执行js顶层代码（同步代码）；</li>
<li>执行的过程中，遇见宏任务，将该宏任务加入到宏任务队列；</li>
<li>遇见微任务，将该微任务加入到微任务队列；</li>
<li>顶层代码执行完毕，依次执行微任务队列中的任务，清空微任务队列；</li>
<li>执行宏任务队列最先加入的宏任务，同时执行步骤2、3；</li>
<li>执行微任务队列中的任务，清空微任务队列，执行步骤5；</li>
</ol>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>浏览器维护着两个队列：宏任务队列和微任务队列。</p>
<p>浏览器的事件循环（简）：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220720223022458.png" alt="浏览器事件循环"></p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>浏览器中的EventLoop是根据HTML5定义的规范来实现的，不同的浏览器可能会有不同的实现，而Node中是由<strong>libuv</strong>实现的。</p>
<p>Node架构图：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220712144326843.png" alt="Node架构图"></p>
<ul>
<li>libuv中主要维护了一个EventLoop和worker threads(线程池），其主要是为Node开发的，现在也被使用到Luvit、Julia、pyuv等其他地方;</li>
<li>EventLoop负责调用系统的一些其他操作∶文件的IO、Network、child-processes等</li>
</ul>
<p>服务器相对于浏览器最大的区别：I&#x2F;O操作。</p>
<p>js本身并不会进行发起网络请求，连接数据库写入数据库，读取文件等操作，这就交给libuv来执行，相当于libuv给js提供了一些接口供其来调用，其本质是libuv执行了系统调用，并将执行结果以回调函数的形式返回，js在合适时机从事件队列拿取这些回调函数去处理结果。</p>
<p>Node中的事件循环被划分为很多阶段：</p>
<ul>
<li>定时器（Timers)：本阶段执行已经被setTimeout()和setInterval()的调度回调函数。</li>
<li>待定回调(Pending Calback)：对某些系统操作（如TCP错误类型）执行回调，比如TCP连接时接收到ECONNREFUSED。</li>
<li>idle， prepare：仅系统内部使用。</li>
<li>轮询（Poll )∶检索新的IO事件;执行与I&#x2F;O相关的回调;</li>
<li>检测( check ) ： setImmediate()回调函数在这里执行。</li>
<li>关闭的回调函数：一些关闭的回调函数，如:socket.on(‘close’,…)。</li>
</ul>
<p>其中，Node程序经常停留在I&#x2F;O阶段</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220721122601235.png" alt="Node微任务队列"></p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 0 1 4 2 3 5 6</span></span><br><span class="line"><span class="comment">// 以上代码不做分析</span></span><br></pre></td></tr></table></figure>

<p><strong>稍稍修改：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 2 4 3 5 6</span></span><br></pre></td></tr></table></figure>

<p>与第一次的不同之处在于，console.log(0)之后返回了一个thenable对象(实现了then方法的对象)<br> <strong>在原生的Promise的实现中，返回的thenable对象如果resolve了，这个resolve会被往后推一次，推到下一次的微任务里面</strong></p>
<p>图示：</p>
<p><img src="https://hrmtest.oss-cn-beijing.aliyuncs.com/image-20220721152327981.png" alt="以上代码图示"></p>
<p>参看：</p>
<p><a href="https://ke.qq.com/webcourse/3619571/103765593#taid=11926213651544819&amp;vid=8602268011107553485">https://ke.qq.com/webcourse/3619571/103765593#taid=11926213651544819&amp;vid=8602268011107553485</a></p>
<p>时间：1:10</p>
<p><strong>再稍稍修改一下代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">4</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="property">log2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6</span></span><br></pre></td></tr></table></figure>

<p>分析：返回了一个thenable对象会被退后一次，即：不是普通的值会被推后一次</p>
<p><strong>如果返回了return Promise.resolve(4)</strong></p>
<p><strong>则会推后两次。</strong> </p>
]]></content>
      <categories>
        <category>js</category>
        <category>事件循环</category>
        <category>单线程</category>
        <category>操作系统</category>
        <category>进程与线程</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>进程</tag>
        <tag>线程</tag>
        <tag>事件循环</tag>
        <tag>eventLoop</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>经济学原理浅学（二）</title>
    <url>/2022/06/08/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E6%B5%85%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>在自由的、无管制的市场的力量建立了均衡价格，决定了交换的数量</p>
<p>经济学原理之一：市场在通常情况下是有效率的.</p>
<p>虽然均衡的状态是有效率的，但是并非每个人都满意的</p>
<h1 id="价格控制"><a href="#价格控制" class="headerlink" title="价格控制"></a>价格控制</h1><p>实行价格控制通常是政府相信市场价格对买方或者卖方不公平.</p>
<p><strong>两种价格控制</strong>:价格上限和价格下限,常常引发事与愿违的结果.(效率和公平损失)</p>
<h2 id="价格上限"><a href="#价格上限" class="headerlink" title="价格上限"></a>价格上限</h2><p>法定最高价格</p>
<p>政府实行价格上限两种可能的结果:价格上限高于均衡价格,价格上限低于均衡价格</p>
<h4 id="价格上限高于均衡价格"><a href="#价格上限高于均衡价格" class="headerlink" title="价格上限高于均衡价格"></a>价格上限高于均衡价格</h4><p>价格上限高于均衡价格,价格上限没有限制性</p>
<p>即:政府虽然制定了价格上限这个约束,但是这个约束条件没有限制性</p>
<p>此时,市场对于该商品的需求量供应量均<strong>不变</strong></p>
<h4 id="价格上限低于均衡价格"><a href="#价格上限低于均衡价格" class="headerlink" title="价格上限低于均衡价格"></a>价格上限低于均衡价格</h4><p>价格上限低于均衡价格,价格上限有限制性;</p>
<p>即:政府制定的价格上限这个约束条件有限制性</p>
<p>此时,市场对于该商品的需求量会增加,对于该商品的供应量会减小,中间差称为<strong>短缺</strong>(经济学定义)</p>
<p><strong>其他条件不变的情况下</strong>,短缺与生产力和生产效率无关</p>
<p>因为不管是生产力低下还是高效,基于市场的供求模型,供给和需求总会达到一个平衡点</p>
<p>在这种场景下,政府如果制定的价格上限如果低于这个均衡价格,才会出现短缺的情况</p>
<p>如果政府制定的价格上限高于均衡价格,那么不会出现短缺</p>
<p>如果出现了短缺,在需求不变的情况下,可以通过增加供给来解决短缺问题.</p>
<h5 id="直接结果"><a href="#直接结果" class="headerlink" title="直接结果"></a>直接结果</h5><p>供给量&lt;需求量</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ul>
<li>70年代的食品(需要粮票去买);</li>
<li>80年代的原材料(钢铁);</li>
<li>90年代发售原始股</li>
</ul>
<h5 id="引出的问题"><a href="#引出的问题" class="headerlink" title="引出的问题"></a>引出的问题</h5><p>有限制作用的价格上限导致了<strong>配给</strong>,因为有短缺</p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul>
<li>排队,先来后到<ul>
<li>造成资源的浪费(时间)</li>
</ul>
</li>
<li>卖者对买着的歧视(例如粮票,种族等,性别,走后门等)<ul>
<li>票虽然不会造成资源浪费,但是持有该票的人不一定最想得到该资源的人</li>
</ul>
</li>
</ul>
<h2 id="价格下限"><a href="#价格下限" class="headerlink" title="价格下限"></a>价格下限</h2><p>法定最低价格</p>
<h4 id="价格下限低于均衡价格"><a href="#价格下限低于均衡价格" class="headerlink" title="价格下限低于均衡价格"></a>价格下限低于均衡价格</h4><p>价格下限低于均衡价格,价格下限没有限制性</p>
<h4 id="价格下限高于均衡价格"><a href="#价格下限高于均衡价格" class="headerlink" title="价格下限高于均衡价格"></a>价格下限高于均衡价格</h4><p>价格下限高于均衡价格,价格下限有限制性</p>
<h5 id="直接结果-1"><a href="#直接结果-1" class="headerlink" title="直接结果"></a>直接结果</h5><p>价格的下限高于均衡价格,需求量减少,供给量增加,供给&gt;需求,<strong>会出现过剩</strong></p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><ul>
<li>最低工资(针对于受教于低,技能差的人群影响较大)<ul>
<li>若劳动市场的工资低于最低工资标准,需<strong>要增加各种措施来”降低”最低工资标准</strong></li>
<li>当某个行业受到冲击,例如某段时间对外贸易量降低(供给降低),会导致一部分人失业;均衡工资降低,如果降到政府规定的最低工资以下,如果政府还坚持当前的最低工资标准,往往会导致更高的失业率</li>
<li>即:政府的初衷是好的(最低工资不变解决失业问题),但是往往会有意想不到的后果:恰恰是经济发展不好的时候,政府的政策存在不利影响.</li>
</ul>
</li>
<li>农产品保护价格(若农产品大丰收,供给量大大增加,其单位价格会降低)<ul>
<li><strong>发达国家存在于农产品的补贴(最低价格),高补贴会保护国内的产业,但是发展中国家的农产品很难出口出去</strong></li>
</ul>
</li>
</ul>
<h2 id="价格控制例子"><a href="#价格控制例子" class="headerlink" title="价格控制例子"></a>价格控制例子</h2><ul>
<li>房租控制</li>
</ul>
<p>房租控制的目的本身,在于让更多的人有住的地方;</p>
<p>将房租的价格控制在均衡价格之下,导致供给减少,但是,可能会出现一些不正之风(比如和管理房子的走后门)</p>
<p><strong>房租控制是摧毁一座城市最好的办法</strong> </p>
<p><strong>分析</strong></p>
<p>房租控制在短期的结果,由于供给需求缺乏弹性,不太可能出现短缺</p>
<p>长期控制,供给和需求均变得有弹性,会出现短缺,如果政府控制价格不变,弹性会越来越大,短缺也会越来越恶化</p>
<p>具体的某个场景,房子的装修会越来越差,租房子的人也只会以较低的价格去租房</p>
]]></content>
      <categories>
        <category>经济学</category>
      </categories>
      <tags>
        <tag>经济学原理</tag>
        <tag>税收</tag>
        <tag>市场和政府政策</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器_可迭代对象</title>
    <url>/2022/04/16/%E8%BF%AD%E4%BB%A3%E5%99%A8-%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="迭代器-iterator"><a href="#迭代器-iterator" class="headerlink" title="迭代器(iterator)"></a>迭代器(iterator)</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><ol>
<li>迭代器是一个对象,它可以帮助我们遍历某种容器对象(例如数组,map,set,字符串),即:迭代器是能够帮助我们对某个数据结构进行遍历的对象)</li>
<li>迭代器并不是js特有;java,python也有迭代器,实现方式不同</li>
</ol>
<h2 id="js中的迭代器"><a href="#js中的迭代器" class="headerlink" title="js中的迭代器"></a>js中的迭代器</h2><ol>
<li><p>在js中,迭代器也是一个具体的对象,这个对象需要符合迭代器协议(iterator protocol)</p>
</li>
<li><p>迭代器协议定义产生一系列值(不管是有限个还是无限个)的标准方式;在js中,这个标准就是<strong>一个”特定”的next方法:</strong></p>
<ul>
<li><p>next方法要求:</p>
<ul>
<li><p>1.一个无参或者有一个参数的函数,</p>
</li>
<li><p>2.返回一个对象, 这个对象包含两个属性</p>
<ul>
<li><p>done:当所有想要遍历的对象已经遍历完了,则为true,否则为false</p>
</li>
<li><p>value:当前遍历到的值,如果done为true,则value可忽略(undefined)</p>
<p> ps:建议都写上,提高代码可读性</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h2><h3 id="可遍历数组的迭代器"><a href="#可遍历数组的迭代器" class="headerlink" title="可遍历数组的迭代器"></a>可遍历数组的迭代器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 创建一个可以遍历数组的迭代器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createIterator</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; arr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: arr[index++],</span><br><span class="line">          <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createIterator</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<h3 id="一个无限迭代器"><a href="#一个无限迭代器" class="headerlink" title="一个无限迭代器"></a>一个无限迭代器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">value</span>: index++,</span><br><span class="line">        <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">createIterator</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// ...可无限调用next方法</span></span><br></pre></td></tr></table></figure>

<h1 id="可迭代对象-iterable"><a href="#可迭代对象-iterable" class="headerlink" title="可迭代对象(iterable)"></a>可迭代对象(iterable)</h1><p>在实现自定义迭代器的代码中,相关变量的 关联性较强;我们将以上代码再次抽取封装,让其变成一个<strong>可迭代对象.</strong></p>
<h2 id="简单介绍-1"><a href="#简单介绍-1" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>什么是可迭代对象?</p>
<p>他与迭代器是不同的概念</p>
<ol>
<li>当它<strong>实现了iterable protocol协议</strong>,它就是一个可迭代对象</li>
<li>对这个对象的要求是必须<strong>实现@@itaretor</strong>,在代码中可<strong>使用[Symbol.iterator]来访问该方法</strong></li>
<li><strong>而[Symbol.iterator]要求返回一个迭代器(对象)</strong></li>
</ol>
<h2 id="可迭代对象的实现"><a href="#可迭代对象的实现" class="headerlink" title="可迭代对象的实现"></a>可迭代对象的实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterableObj = &#123;</span><br><span class="line">  <span class="attr">values</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">      <span class="comment">// 注意此处必须是箭头函数,否则无法找到names属性</span></span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">values</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">values</span>[index++],</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iterator</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = iterableObj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 生成新的迭代器,不管之前的迭代器遍历到何种程度,新的迭代器会重新遍历.</span></span><br><span class="line">iterator = iterableObj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<h1 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>for…of遍历的对象必须是一个可迭代对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>));	<span class="comment">// [].__proto__</span></span><br><span class="line"><span class="comment">// [Symbol(Symbol.iterator), Symbol(Symbol.unscopables)]	</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(<span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>)); 	<span class="comment">// new Map().__proto__</span></span><br><span class="line"><span class="comment">// [Symbol(Symbol.toStringTag), Symbol(Symbol.iterator)]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(<span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>));	<span class="comment">// new Set().__proto__</span></span><br><span class="line"><span class="comment">// [Symbol(Symbol.toStringTag), Symbol(Symbol.iterator)]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">// &#x27;&#x27;.__proto__</span></span><br><span class="line"><span class="comment">// [ Symbol(Symbol.iterator) ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]);				<span class="comment">// [].__protp__[Symbol.iterator]</span></span><br><span class="line"><span class="comment">// [Function: values]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]);				<span class="comment">// new Map().__proto__[Symbol.iterator]</span></span><br><span class="line"><span class="comment">// [Function: entries]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]);				<span class="comment">// new set().__proto__[Symbol.iterator]</span></span><br><span class="line"><span class="comment">// [Function: values]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]);				<span class="comment">// &#x27;&#x27;.__proto__[Symbol.iterator]</span></span><br><span class="line"><span class="comment">// [Function: [Symbol.iterator]]</span></span><br></pre></td></tr></table></figure>

<p>可见,<strong>Array</strong>,<strong>Map</strong>和<strong>Set</strong>和<strong>String</strong>均实现了[Symbol(Symbol.iterator)]这个方法</p>
<p>类似的,arguments,NodeList集合也都是可迭代对象(<strong>实现了[Symbol(Symbol.iterator)]方法</strong>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// [ Symbol(Symbol.iterator) ]</span></span><br></pre></td></tr></table></figure>

<p><strong>对象{}因为没有实现[Symbol(Symbol.iterator)]这个方法,所以不能使用for…of循环</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));</span><br><span class="line"><span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="原生数据结构使用for…of遍历"><a href="#原生数据结构使用for…of遍历" class="headerlink" title="原生数据结构使用for…of遍历"></a>原生数据结构使用for…of遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数组返回值</span></span><br><span class="line"><span class="comment">// set返回值</span></span><br><span class="line"><span class="comment">// map返回数组形式的键值,形如[key, value]</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义可迭代对象使用for…of"><a href="#自定义可迭代对象使用for…of" class="headerlink" title="自定义可迭代对象使用for…of"></a>自定义可迭代对象使用for…of</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用for...of遍历iterableObj(可迭代对象的实现板块,可直接复制)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterableObj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 将iterableObj的next的if条件改为index &lt; 1,再次使用for...of</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们也可以拿到js原生数据结构的某些可迭代对象的迭代器</span></span><br><span class="line"><span class="keyword">let</span> iterator = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> iterator = <span class="variable language_">arguments</span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">  <span class="keyword">let</span> next = iterator.<span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>, <span class="string">&#x27;next&#x27;</span>);</span><br><span class="line">    next = iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// map,set,string小伙伴可自行测试</span></span><br></pre></td></tr></table></figure>

<p><strong><font color=red>在迭代器对象的next方法返回的对象的done为false时,js会将value赋值给for…of循环的item</font></strong></p>
<p><strong><font color=red>这就是for…of循环的本质</font></strong></p>
<h1 id="可迭代对象的应用"><a href="#可迭代对象的应用" class="headerlink" title="可迭代对象的应用"></a>可迭代对象的应用</h1><h2 id="for…of-1"><a href="#for…of-1" class="headerlink" title="for…of"></a>for…of</h2><h2 id="展开语法-…"><a href="#展开语法-…" class="headerlink" title="展开语法(…)"></a>展开语法(…)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...iterableObj);</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>]]));</span><br><span class="line"><span class="comment">// [ 1, 1 ] [ 2, 2 ] [ 3, 3 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="yield"><a href="#yield" class="headerlink" title="yield*"></a>yield*</h2><p>见生成器模块</p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;hrm&#x27;</span>, <span class="string">&#x27;djw&#x27;</span>, <span class="string">&#x27;hrc&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> [value1, value2] = names;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value1, value2);</span><br><span class="line"><span class="comment">// 解构赋值的原理也是迭代器,是分别将当前迭代器的next().value赋值给value1,value2    </span></span><br></pre></td></tr></table></figure>

<h2 id="一些方法的调用"><a href="#一些方法的调用" class="headerlink" title="一些方法的调用"></a>一些方法的调用</h2><p>在创建一些对象时,其构造函数的参数可传入一个可迭代对象</p>
<p>(可参看Map,Set构造函数的ts文件类型声明)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set的定义</span></span><br><span class="line"><span class="comment">// 构造函数传入一维数组</span></span><br><span class="line">interface <span class="title class_">SetConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> &lt;T = any&gt;(values?: readonly T[] | <span class="literal">null</span>): <span class="title class_">Set</span>&lt;T&gt;;</span><br><span class="line">    readonly <span class="attr">prototype</span>: <span class="title class_">Set</span>&lt;any&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map的定义</span></span><br><span class="line"><span class="comment">// 构造函数传入一个二维数组</span></span><br><span class="line">interface <span class="title class_">MapConstructor</span> &#123;</span><br><span class="line">    <span class="title function_">new</span>(): <span class="title class_">Map</span>&lt;any, any&gt;;</span><br><span class="line">    <span class="keyword">new</span>&lt;K, V&gt;(entries?: readonly (readonly [K, V])[] | <span class="literal">null</span>): <span class="title class_">Map</span>&lt;K, V&gt;;</span><br><span class="line">    readonly <span class="attr">prototype</span>: <span class="title class_">Map</span>&lt;any, any&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="number">1</span>, <span class="number">1</span>],[<span class="number">2</span>, <span class="number">2</span>]]));</span><br></pre></td></tr></table></figure>

<p>除此之外,还有例如Promise.all(iterable)、Promise.race(iterable)、Array.from(iterable)等方法</p>
<h1 id="自定义类的可迭代性"><a href="#自定义类的可迭代性" class="headerlink" title="自定义类的可迭代性"></a>自定义类的可迭代性</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建教室类,该教室的学生可遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address, name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = address;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pushStudent</span>(<span class="params">student</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">push</span>(student);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Room.prototype[Symbol.iterator] = function() &#123;&#125;</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">students</span>[index++]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// return是对迭代器提前终止的监听,返回值和next一致</span></span><br><span class="line">      <span class="comment">// 提前终止包括:break;continue;return;throw</span></span><br><span class="line">      <span class="comment">// 另一种情况,在解构的情况下,没有解构所有的值</span></span><br><span class="line">      <span class="attr">return</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;迭代器提前终止&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> room = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&#x27;行远楼A105&#x27;</span>, <span class="string">&#x27;软件工程教室&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;hrm&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;xcl&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;dmy&#x27;</span>);</span><br><span class="line">room.<span class="title function_">pushStudent</span>(<span class="string">&#x27;gq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> student <span class="keyword">of</span> room) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line">  <span class="keyword">if</span> (student === <span class="string">&#x27;dmy&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// throw new Error(&#x27;dmy&#x27;);</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> student <span class="keyword">of</span> room) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><h2 id="展开运算符…"><a href="#展开运算符…" class="headerlink" title="展开运算符…"></a>展开运算符…</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hrm&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;djw&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> info = &#123; ...obj &#125;</span><br><span class="line"></span><br><span class="line">info.<span class="property">friends</span>.<span class="property">name</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">friends</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friends</span>);</span><br><span class="line"><span class="comment">// &#123; name: null, age: 18 &#125;</span></span><br><span class="line"><span class="comment">// &#123; name: null, age: 18 &#125;</span></span><br></pre></td></tr></table></figure>

<p>说明:这是ES9引入的新语法,<strong>是对”…”展开运算符功能的拓展</strong>,<strong>和迭代器没有关系</strong>;而且,在对象内部使用…展开运算符,是对对象属性的浅拷贝.</p>
<p>想要对对象实现遍历,我们可以换一种思路:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hrm&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;djw&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(entry)</span><br><span class="line">  <span class="comment">// entry ==&gt; [key, value]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的解构赋值也不同于数组的解构赋值,也是ES9引入的新语法,也与迭代器无关</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>js</category>
        <category>js底层原理</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
        <tag>迭代器</tag>
        <tag>iterator</tag>
        <tag>可迭代对象</tag>
        <tag>ts</tag>
        <tag>js实现原理</tag>
        <tag>iterable</tag>
      </tags>
  </entry>
</search>
